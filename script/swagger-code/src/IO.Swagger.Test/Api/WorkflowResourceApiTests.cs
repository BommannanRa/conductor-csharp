/* 
 * Orkes Conductor API Server
 *
 * Orkes Conductor API Server
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing WorkflowResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WorkflowResourceApiTests
    {
        private WorkflowResourceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WorkflowResourceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WorkflowResourceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WorkflowResourceApi
            //Assert.IsInstanceOfType(typeof(WorkflowResourceApi), instance, "instance is a WorkflowResourceApi");
        }

        /// <summary>
        /// Test Decide
        /// </summary>
        [Test]
        public void DecideTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //instance.Decide(workflowId);
            
        }
        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //bool? archiveWorkflow = null;
            //instance.Delete(workflowId, archiveWorkflow);
            
        }
        /// <summary>
        /// Test ExecuteWorkflow
        /// </summary>
        [Test]
        public void ExecuteWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //StartWorkflowRequest body = null;
            //string requestId = null;
            //string name = null;
            //int? version = null;
            //string waitUntilTaskRef = null;
            //var response = instance.ExecuteWorkflow(body, requestId, name, version, waitUntilTaskRef);
            //Assert.IsInstanceOf<WorkflowRun> (response, "response is WorkflowRun");
        }
        /// <summary>
        /// Test GetExecutionStatus
        /// </summary>
        [Test]
        public void GetExecutionStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //bool? includeTasks = null;
            //bool? summarize = null;
            //var response = instance.GetExecutionStatus(workflowId, includeTasks, summarize);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        /// <summary>
        /// Test GetExecutionStatusTaskList
        /// </summary>
        [Test]
        public void GetExecutionStatusTaskListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //int? start = null;
            //int? count = null;
            //string status = null;
            //var response = instance.GetExecutionStatusTaskList(workflowId, start, count, status);
            //Assert.IsInstanceOf<SearchResultTask> (response, "response is SearchResultTask");
        }
        /// <summary>
        /// Test GetExternalStorageLocation
        /// </summary>
        [Test]
        public void GetExternalStorageLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string operation = null;
            //string payloadType = null;
            //var response = instance.GetExternalStorageLocation(path, operation, payloadType);
            //Assert.IsInstanceOf<ExternalStorageLocation> (response, "response is ExternalStorageLocation");
        }
        /// <summary>
        /// Test GetRunningWorkflow
        /// </summary>
        [Test]
        public void GetRunningWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int? version = null;
            //long? startTime = null;
            //long? endTime = null;
            //var response = instance.GetRunningWorkflow(name, version, startTime, endTime);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        /// <summary>
        /// Test GetWorkflowStatusSummary
        /// </summary>
        [Test]
        public void GetWorkflowStatusSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //bool? includeOutput = null;
            //bool? includeVariables = null;
            //var response = instance.GetWorkflowStatusSummary(workflowId, includeOutput, includeVariables);
            //Assert.IsInstanceOf<WorkflowStatus> (response, "response is WorkflowStatus");
        }
        /// <summary>
        /// Test GetWorkflows
        /// </summary>
        [Test]
        public void GetWorkflowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //string name = null;
            //bool? includeClosed = null;
            //bool? includeTasks = null;
            //var response = instance.GetWorkflows(body, name, includeClosed, includeTasks);
            //Assert.IsInstanceOf<Dictionary<string, List<Workflow>>> (response, "response is Dictionary<string, List<Workflow>>");
        }
        /// <summary>
        /// Test GetWorkflows1
        /// </summary>
        [Test]
        public void GetWorkflows1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string correlationId = null;
            //bool? includeClosed = null;
            //bool? includeTasks = null;
            //var response = instance.GetWorkflows1(name, correlationId, includeClosed, includeTasks);
            //Assert.IsInstanceOf<List<Workflow>> (response, "response is List<Workflow>");
        }
        /// <summary>
        /// Test NotifyWorkflowCompletion
        /// </summary>
        [Test]
        public void NotifyWorkflowCompletionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //var response = instance.NotifyWorkflowCompletion(workflowId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test PauseWorkflow
        /// </summary>
        [Test]
        public void PauseWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //instance.PauseWorkflow(workflowId);
            
        }
        /// <summary>
        /// Test Rerun
        /// </summary>
        [Test]
        public void RerunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RerunWorkflowRequest body = null;
            //string workflowId = null;
            //var response = instance.Rerun(body, workflowId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test ResetWorkflow
        /// </summary>
        [Test]
        public void ResetWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //instance.ResetWorkflow(workflowId);
            
        }
        /// <summary>
        /// Test Restart
        /// </summary>
        [Test]
        public void RestartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //bool? useLatestDefinitions = null;
            //instance.Restart(workflowId, useLatestDefinitions);
            
        }
        /// <summary>
        /// Test ResumeWorkflow
        /// </summary>
        [Test]
        public void ResumeWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //instance.ResumeWorkflow(workflowId);
            
        }
        /// <summary>
        /// Test Retry
        /// </summary>
        [Test]
        public void RetryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //bool? resumeSubworkflowTasks = null;
            //instance.Retry(workflowId, resumeSubworkflowTasks);
            
        }
        /// <summary>
        /// Test Search
        /// </summary>
        [Test]
        public void SearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queryId = null;
            //int? start = null;
            //int? size = null;
            //string sort = null;
            //string freeText = null;
            //string query = null;
            //bool? skipCache = null;
            //var response = instance.Search(queryId, start, size, sort, freeText, query, skipCache);
            //Assert.IsInstanceOf<ScrollableSearchResultWorkflowSummary> (response, "response is ScrollableSearchResultWorkflowSummary");
        }
        /// <summary>
        /// Test SearchV2
        /// </summary>
        [Test]
        public void SearchV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? size = null;
            //string sort = null;
            //string freeText = null;
            //string query = null;
            //var response = instance.SearchV2(start, size, sort, freeText, query);
            //Assert.IsInstanceOf<SearchResultWorkflow> (response, "response is SearchResultWorkflow");
        }
        /// <summary>
        /// Test SearchWorkflowsByTasks
        /// </summary>
        [Test]
        public void SearchWorkflowsByTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? size = null;
            //string sort = null;
            //string freeText = null;
            //string query = null;
            //var response = instance.SearchWorkflowsByTasks(start, size, sort, freeText, query);
            //Assert.IsInstanceOf<SearchResultWorkflowSummary> (response, "response is SearchResultWorkflowSummary");
        }
        /// <summary>
        /// Test SearchWorkflowsByTasksV2
        /// </summary>
        [Test]
        public void SearchWorkflowsByTasksV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? size = null;
            //string sort = null;
            //string freeText = null;
            //string query = null;
            //var response = instance.SearchWorkflowsByTasksV2(start, size, sort, freeText, query);
            //Assert.IsInstanceOf<SearchResultWorkflow> (response, "response is SearchResultWorkflow");
        }
        /// <summary>
        /// Test SkipTaskFromWorkflow
        /// </summary>
        [Test]
        public void SkipTaskFromWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //string taskReferenceName = null;
            //SkipTaskRequest skipTaskRequest = null;
            //instance.SkipTaskFromWorkflow(workflowId, taskReferenceName, skipTaskRequest);
            
        }
        /// <summary>
        /// Test StartWorkflow
        /// </summary>
        [Test]
        public void StartWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //StartWorkflowRequest body = null;
            //var response = instance.StartWorkflow(body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test StartWorkflow1
        /// </summary>
        [Test]
        public void StartWorkflow1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> body = null;
            //string name = null;
            //int? version = null;
            //string correlationId = null;
            //int? priority = null;
            //var response = instance.StartWorkflow1(body, name, version, correlationId, priority);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test Terminate1
        /// </summary>
        [Test]
        public void Terminate1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //string reason = null;
            //instance.Terminate1(workflowId, reason);
            
        }
        /// <summary>
        /// Test UploadCompletedWorkflows
        /// </summary>
        [Test]
        public void UploadCompletedWorkflowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UploadCompletedWorkflows();
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
