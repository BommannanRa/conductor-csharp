/* 
 * Orkes Conductor API Server
 *
 * Orkes Conductor API Server
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TaskResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TaskResourceApiTests
    {
        private TaskResourceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TaskResourceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TaskResourceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TaskResourceApi
            //Assert.IsInstanceOfType(typeof(TaskResourceApi), instance, "instance is a TaskResourceApi");
        }

        /// <summary>
        /// Test All
        /// </summary>
        [Test]
        public void AllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.All();
            //Assert.IsInstanceOf<Dictionary<string, long?>> (response, "response is Dictionary<string, long?>");
        }
        /// <summary>
        /// Test AllVerbose
        /// </summary>
        [Test]
        public void AllVerboseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AllVerbose();
            //Assert.IsInstanceOf<Dictionary<string, Dictionary<string, Dictionary<string, long?>>>> (response, "response is Dictionary<string, Dictionary<string, Dictionary<string, long?>>>");
        }
        /// <summary>
        /// Test BatchPoll
        /// </summary>
        [Test]
        public void BatchPollTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tasktype = null;
            //string workerid = null;
            //string domain = null;
            //int? count = null;
            //int? timeout = null;
            //var response = instance.BatchPoll(tasktype, workerid, domain, count, timeout);
            //Assert.IsInstanceOf<List<Task>> (response, "response is List<Task>");
        }
        /// <summary>
        /// Test GetAllPollData
        /// </summary>
        [Test]
        public void GetAllPollDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllPollData();
            //Assert.IsInstanceOf<List<PollData>> (response, "response is List<PollData>");
        }
        /// <summary>
        /// Test GetExternalStorageLocation1
        /// </summary>
        [Test]
        public void GetExternalStorageLocation1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string operation = null;
            //string payloadType = null;
            //var response = instance.GetExternalStorageLocation1(path, operation, payloadType);
            //Assert.IsInstanceOf<ExternalStorageLocation> (response, "response is ExternalStorageLocation");
        }
        /// <summary>
        /// Test GetPollData
        /// </summary>
        [Test]
        public void GetPollDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskType = null;
            //var response = instance.GetPollData(taskType);
            //Assert.IsInstanceOf<List<PollData>> (response, "response is List<PollData>");
        }
        /// <summary>
        /// Test GetTask
        /// </summary>
        [Test]
        public void GetTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.GetTask(taskId);
            //Assert.IsInstanceOf<Task> (response, "response is Task");
        }
        /// <summary>
        /// Test GetTaskLogs
        /// </summary>
        [Test]
        public void GetTaskLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.GetTaskLogs(taskId);
            //Assert.IsInstanceOf<List<TaskExecLog>> (response, "response is List<TaskExecLog>");
        }
        /// <summary>
        /// Test Log
        /// </summary>
        [Test]
        public void LogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //string taskId = null;
            //instance.Log(body, taskId);
            
        }
        /// <summary>
        /// Test Poll
        /// </summary>
        [Test]
        public void PollTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tasktype = null;
            //string workerid = null;
            //string domain = null;
            //var response = instance.Poll(tasktype, workerid, domain);
            //Assert.IsInstanceOf<Task> (response, "response is Task");
        }
        /// <summary>
        /// Test RequeuePendingTask
        /// </summary>
        [Test]
        public void RequeuePendingTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskType = null;
            //var response = instance.RequeuePendingTask(taskType);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test Search1
        /// </summary>
        [Test]
        public void Search1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? size = null;
            //string sort = null;
            //string freeText = null;
            //string query = null;
            //var response = instance.Search1(start, size, sort, freeText, query);
            //Assert.IsInstanceOf<SearchResultTaskSummary> (response, "response is SearchResultTaskSummary");
        }
        /// <summary>
        /// Test SearchV21
        /// </summary>
        [Test]
        public void SearchV21Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? size = null;
            //string sort = null;
            //string freeText = null;
            //string query = null;
            //var response = instance.SearchV21(start, size, sort, freeText, query);
            //Assert.IsInstanceOf<SearchResultTask> (response, "response is SearchResultTask");
        }
        /// <summary>
        /// Test Size
        /// </summary>
        [Test]
        public void SizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> taskType = null;
            //var response = instance.Size(taskType);
            //Assert.IsInstanceOf<Dictionary<string, int?>> (response, "response is Dictionary<string, int?>");
        }
        /// <summary>
        /// Test UpdateTask
        /// </summary>
        [Test]
        public void UpdateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TaskResult body = null;
            //var response = instance.UpdateTask(body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test UpdateTask1
        /// </summary>
        [Test]
        public void UpdateTask1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> body = null;
            //string workflowId = null;
            //string taskRefName = null;
            //string status = null;
            //var response = instance.UpdateTask1(body, workflowId, taskRefName, status);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
    }

}
