/* 
 * Orkes Conductor API Server
 *
 * Orkes Conductor API Server
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing EventResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EventResourceApiTests
    {
        private EventResourceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EventResourceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EventResourceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EventResourceApi
            //Assert.IsInstanceOfType(typeof(EventResourceApi), instance, "instance is a EventResourceApi");
        }

        /// <summary>
        /// Test AddEventHandler
        /// </summary>
        [Test]
        public void AddEventHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EventHandler body = null;
            //instance.AddEventHandler(body);
            
        }
        /// <summary>
        /// Test DeleteQueueConfig
        /// </summary>
        [Test]
        public void DeleteQueueConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queueType = null;
            //string queueName = null;
            //instance.DeleteQueueConfig(queueType, queueName);
            
        }
        /// <summary>
        /// Test GetEventHandlers
        /// </summary>
        [Test]
        public void GetEventHandlersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetEventHandlers();
            //Assert.IsInstanceOf<List<EventHandler>> (response, "response is List<EventHandler>");
        }
        /// <summary>
        /// Test GetEventHandlersForEvent
        /// </summary>
        [Test]
        public void GetEventHandlersForEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _event = null;
            //bool? activeOnly = null;
            //var response = instance.GetEventHandlersForEvent(_event, activeOnly);
            //Assert.IsInstanceOf<List<EventHandler>> (response, "response is List<EventHandler>");
        }
        /// <summary>
        /// Test GetQueueConfig
        /// </summary>
        [Test]
        public void GetQueueConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queueType = null;
            //string queueName = null;
            //var response = instance.GetQueueConfig(queueType, queueName);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        /// <summary>
        /// Test GetQueueNames
        /// </summary>
        [Test]
        public void GetQueueNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetQueueNames();
            //Assert.IsInstanceOf<Dictionary<string, string>> (response, "response is Dictionary<string, string>");
        }
        /// <summary>
        /// Test PutQueueConfig
        /// </summary>
        [Test]
        public void PutQueueConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //string queueType = null;
            //string queueName = null;
            //instance.PutQueueConfig(body, queueType, queueName);
            
        }
        /// <summary>
        /// Test RemoveEventHandlerStatus
        /// </summary>
        [Test]
        public void RemoveEventHandlerStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.RemoveEventHandlerStatus(name);
            
        }
        /// <summary>
        /// Test UpdateEventHandler
        /// </summary>
        [Test]
        public void UpdateEventHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EventHandler body = null;
            //instance.UpdateEventHandler(body);
            
        }
    }

}
