/* 
 * Orkes Conductor API Server
 *
 * Orkes Conductor API Server
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ApplicationResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ApplicationResourceApiTests
    {
        private ApplicationResourceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ApplicationResourceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ApplicationResourceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ApplicationResourceApi
            //Assert.IsInstanceOfType(typeof(ApplicationResourceApi), instance, "instance is a ApplicationResourceApi");
        }

        /// <summary>
        /// Test AddRoleToApplicationUser
        /// </summary>
        [Test]
        public void AddRoleToApplicationUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string role = null;
            //var response = instance.AddRoleToApplicationUser(applicationId, role);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateAccessKey
        /// </summary>
        [Test]
        public void CreateAccessKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CreateAccessKey(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test CreateApplication
        /// </summary>
        [Test]
        public void CreateApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateOrUpdateApplicationRequest body = null;
            //var response = instance.CreateApplication(body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DeleteAccessKey
        /// </summary>
        [Test]
        public void DeleteAccessKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string keyId = null;
            //var response = instance.DeleteAccessKey(applicationId, keyId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DeleteApplication
        /// </summary>
        [Test]
        public void DeleteApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteApplication(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DeleteTagForApplication
        /// </summary>
        [Test]
        public void DeleteTagForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string body = null;
            //instance.DeleteTagForApplication(id, body);
            
        }
        /// <summary>
        /// Test GetAccessKeys
        /// </summary>
        [Test]
        public void GetAccessKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetAccessKeys(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetApplication
        /// </summary>
        [Test]
        public void GetApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetApplication(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetTagsForApplication
        /// </summary>
        [Test]
        public void GetTagsForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetTagsForApplication(id);
            //Assert.IsInstanceOf<List<TagObject>> (response, "response is List<TagObject>");
        }
        /// <summary>
        /// Test ListApplications
        /// </summary>
        [Test]
        public void ListApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListApplications();
            //Assert.IsInstanceOf<List<ConductorApplication>> (response, "response is List<ConductorApplication>");
        }
        /// <summary>
        /// Test PutTagForApplication
        /// </summary>
        [Test]
        public void PutTagForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string body = null;
            //instance.PutTagForApplication(id, body);
            
        }
        /// <summary>
        /// Test RemoveRoleFromApplicationUser
        /// </summary>
        [Test]
        public void RemoveRoleFromApplicationUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string role = null;
            //var response = instance.RemoveRoleFromApplicationUser(applicationId, role);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ToggleAccessKeyStatus
        /// </summary>
        [Test]
        public void ToggleAccessKeyStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string keyId = null;
            //var response = instance.ToggleAccessKeyStatus(applicationId, keyId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateApplication
        /// </summary>
        [Test]
        public void UpdateApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateOrUpdateApplicationRequest body = null;
            //string id = null;
            //var response = instance.UpdateApplication(body, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
