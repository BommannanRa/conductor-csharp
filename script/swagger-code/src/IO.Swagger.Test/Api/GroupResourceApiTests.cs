/* 
 * Orkes Conductor API Server
 *
 * Orkes Conductor API Server
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing GroupResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GroupResourceApiTests
    {
        private GroupResourceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GroupResourceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GroupResourceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GroupResourceApi
            //Assert.IsInstanceOfType(typeof(GroupResourceApi), instance, "instance is a GroupResourceApi");
        }

        /// <summary>
        /// Test AddUserToGroup
        /// </summary>
        [Test]
        public void AddUserToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string userId = null;
            //var response = instance.AddUserToGroup(groupId, userId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test AddUsersToGroup
        /// </summary>
        [Test]
        public void AddUsersToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //string groupId = null;
            //instance.AddUsersToGroup(body, groupId);
            
        }
        /// <summary>
        /// Test DeleteGroup
        /// </summary>
        [Test]
        public void DeleteGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteGroup(id);
            //Assert.IsInstanceOf<Response> (response, "response is Response");
        }
        /// <summary>
        /// Test GetGrantedPermissions1
        /// </summary>
        [Test]
        public void GetGrantedPermissions1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //var response = instance.GetGrantedPermissions1(groupId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetGroup
        /// </summary>
        [Test]
        public void GetGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetGroup(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetUsersInGroup
        /// </summary>
        [Test]
        public void GetUsersInGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetUsersInGroup(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListGroups
        /// </summary>
        [Test]
        public void ListGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListGroups();
            //Assert.IsInstanceOf<List<Group>> (response, "response is List<Group>");
        }
        /// <summary>
        /// Test RemoveUserFromGroup
        /// </summary>
        [Test]
        public void RemoveUserFromGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string userId = null;
            //var response = instance.RemoveUserFromGroup(groupId, userId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test RemoveUsersFromGroup
        /// </summary>
        [Test]
        public void RemoveUsersFromGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //string groupId = null;
            //instance.RemoveUsersFromGroup(body, groupId);
            
        }
        /// <summary>
        /// Test UpsertGroup
        /// </summary>
        [Test]
        public void UpsertGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpsertGroupRequest body = null;
            //string id = null;
            //var response = instance.UpsertGroup(body, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
