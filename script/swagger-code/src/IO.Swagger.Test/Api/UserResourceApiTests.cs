/* 
 * Orkes Conductor API Server
 *
 * Orkes Conductor API Server
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UserResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserResourceApiTests
    {
        private UserResourceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserResourceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserResourceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UserResourceApi
            //Assert.IsInstanceOfType(typeof(UserResourceApi), instance, "instance is a UserResourceApi");
        }

        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Test]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteUser(id);
            //Assert.IsInstanceOf<Response> (response, "response is Response");
        }
        /// <summary>
        /// Test GetGrantedPermissions
        /// </summary>
        [Test]
        public void GetGrantedPermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.GetGrantedPermissions(userId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetUser(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test ListUsers
        /// </summary>
        [Test]
        public void ListUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? apps = null;
            //var response = instance.ListUsers(apps);
            //Assert.IsInstanceOf<List<ConductorUser>> (response, "response is List<ConductorUser>");
        }
        /// <summary>
        /// Test SendInviteEmail
        /// </summary>
        [Test]
        public void SendInviteEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ConductorUser body = null;
            //var response = instance.SendInviteEmail(id, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpsertUser
        /// </summary>
        [Test]
        public void UpsertUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpsertUserRequest body = null;
            //string id = null;
            //var response = instance.UpsertUser(body, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
    }

}
