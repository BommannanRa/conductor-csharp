/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Conductor.Client.Models
{
    /// <summary>
    /// FileOptions
    /// </summary>
    [DataContract]
    public partial class FileOptions :  IEquatable<FileOptions>, IValidatableObject
    {
        /// <summary>
        /// Defines OptimizeFor
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OptimizeForEnum
        {
            
            /// <summary>
            /// Enum SPEED for value: SPEED
            /// </summary>
            [EnumMember(Value = "SPEED")]
            SPEED = 1,
            
            /// <summary>
            /// Enum CODESIZE for value: CODE_SIZE
            /// </summary>
            [EnumMember(Value = "CODE_SIZE")]
            CODESIZE = 2,
            
            /// <summary>
            /// Enum LITERUNTIME for value: LITE_RUNTIME
            /// </summary>
            [EnumMember(Value = "LITE_RUNTIME")]
            LITERUNTIME = 3
        }

        /// <summary>
        /// Gets or Sets OptimizeFor
        /// </summary>
        [DataMember(Name="optimizeFor", EmitDefaultValue=false)]
        public OptimizeForEnum? OptimizeFor { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileOptions" /> class.
        /// </summary>
        /// <param name="unknownFields">unknownFields.</param>
        /// <param name="initialized">initialized (default to false).</param>
        /// <param name="javaPackage">javaPackage.</param>
        /// <param name="javaPackageBytes">javaPackageBytes.</param>
        /// <param name="javaOuterClassname">javaOuterClassname.</param>
        /// <param name="javaOuterClassnameBytes">javaOuterClassnameBytes.</param>
        /// <param name="javaMultipleFiles">javaMultipleFiles (default to false).</param>
        /// <param name="javaGenerateEqualsAndHash">javaGenerateEqualsAndHash (default to false).</param>
        /// <param name="optimizeFor">optimizeFor.</param>
        /// <param name="goPackage">goPackage.</param>
        /// <param name="goPackageBytes">goPackageBytes.</param>
        /// <param name="ccGenericServices">ccGenericServices (default to false).</param>
        /// <param name="javaGenericServices">javaGenericServices (default to false).</param>
        /// <param name="pyGenericServices">pyGenericServices (default to false).</param>
        /// <param name="phpGenericServices">phpGenericServices (default to false).</param>
        /// <param name="ccEnableArenas">ccEnableArenas (default to false).</param>
        /// <param name="objcClassPrefix">objcClassPrefix.</param>
        /// <param name="objcClassPrefixBytes">objcClassPrefixBytes.</param>
        /// <param name="csharpNamespace">csharpNamespace.</param>
        /// <param name="csharpNamespaceBytes">csharpNamespaceBytes.</param>
        /// <param name="swiftPrefix">swiftPrefix.</param>
        /// <param name="swiftPrefixBytes">swiftPrefixBytes.</param>
        /// <param name="phpClassPrefix">phpClassPrefix.</param>
        /// <param name="phpClassPrefixBytes">phpClassPrefixBytes.</param>
        /// <param name="phpNamespace">phpNamespace.</param>
        /// <param name="phpNamespaceBytes">phpNamespaceBytes.</param>
        /// <param name="parserForType">parserForType.</param>
        /// <param name="defaultInstanceForType">defaultInstanceForType.</param>
        /// <param name="serializedSize">serializedSize.</param>
        /// <param name="deprecated">deprecated (default to false).</param>
        /// <param name="uninterpretedOptionList">uninterpretedOptionList.</param>
        /// <param name="uninterpretedOptionOrBuilderList">uninterpretedOptionOrBuilderList.</param>
        /// <param name="uninterpretedOptionCount">uninterpretedOptionCount.</param>
        /// <param name="javaStringCheckUtf8">javaStringCheckUtf8 (default to false).</param>
        /// <param name="initializationErrorString">initializationErrorString.</param>
        /// <param name="descriptorForType">descriptorForType.</param>
        /// <param name="allFields">allFields.</param>
        /// <param name="allFieldsRaw">allFieldsRaw.</param>
        public FileOptions(UnknownFieldSet unknownFields = default(UnknownFieldSet), bool? initialized = false, string javaPackage = default(string), ByteString javaPackageBytes = default(ByteString), string javaOuterClassname = default(string), ByteString javaOuterClassnameBytes = default(ByteString), bool? javaMultipleFiles = false, bool? javaGenerateEqualsAndHash = false, OptimizeForEnum? optimizeFor = default(OptimizeForEnum?), string goPackage = default(string), ByteString goPackageBytes = default(ByteString), bool? ccGenericServices = false, bool? javaGenericServices = false, bool? pyGenericServices = false, bool? phpGenericServices = false, bool? ccEnableArenas = false, string objcClassPrefix = default(string), ByteString objcClassPrefixBytes = default(ByteString), string csharpNamespace = default(string), ByteString csharpNamespaceBytes = default(ByteString), string swiftPrefix = default(string), ByteString swiftPrefixBytes = default(ByteString), string phpClassPrefix = default(string), ByteString phpClassPrefixBytes = default(ByteString), string phpNamespace = default(string), ByteString phpNamespaceBytes = default(ByteString), ParserFileOptions parserForType = default(ParserFileOptions), FileOptions defaultInstanceForType = default(FileOptions), int? serializedSize = default(int?), bool? deprecated = false, List<UninterpretedOption> uninterpretedOptionList = default(List<UninterpretedOption>), List<UninterpretedOptionOrBuilder> uninterpretedOptionOrBuilderList = default(List<UninterpretedOptionOrBuilder>), int? uninterpretedOptionCount = default(int?), bool? javaStringCheckUtf8 = false, string initializationErrorString = default(string), Descriptor descriptorForType = default(Descriptor), Dictionary<string, Object> allFields = default(Dictionary<string, Object>), Dictionary<string, Object> allFieldsRaw = default(Dictionary<string, Object>))
        {
            this.UnknownFields = unknownFields;
            // use default value if no "initialized" provided
            if (initialized == null)
            {
                this.Initialized = false;
            }
            else
            {
                this.Initialized = initialized;
            }
            this.JavaPackage = javaPackage;
            this.JavaPackageBytes = javaPackageBytes;
            this.JavaOuterClassname = javaOuterClassname;
            this.JavaOuterClassnameBytes = javaOuterClassnameBytes;
            // use default value if no "javaMultipleFiles" provided
            if (javaMultipleFiles == null)
            {
                this.JavaMultipleFiles = false;
            }
            else
            {
                this.JavaMultipleFiles = javaMultipleFiles;
            }
            // use default value if no "javaGenerateEqualsAndHash" provided
            if (javaGenerateEqualsAndHash == null)
            {
                this.JavaGenerateEqualsAndHash = false;
            }
            else
            {
                this.JavaGenerateEqualsAndHash = javaGenerateEqualsAndHash;
            }
            this.OptimizeFor = optimizeFor;
            this.GoPackage = goPackage;
            this.GoPackageBytes = goPackageBytes;
            // use default value if no "ccGenericServices" provided
            if (ccGenericServices == null)
            {
                this.CcGenericServices = false;
            }
            else
            {
                this.CcGenericServices = ccGenericServices;
            }
            // use default value if no "javaGenericServices" provided
            if (javaGenericServices == null)
            {
                this.JavaGenericServices = false;
            }
            else
            {
                this.JavaGenericServices = javaGenericServices;
            }
            // use default value if no "pyGenericServices" provided
            if (pyGenericServices == null)
            {
                this.PyGenericServices = false;
            }
            else
            {
                this.PyGenericServices = pyGenericServices;
            }
            // use default value if no "phpGenericServices" provided
            if (phpGenericServices == null)
            {
                this.PhpGenericServices = false;
            }
            else
            {
                this.PhpGenericServices = phpGenericServices;
            }
            // use default value if no "ccEnableArenas" provided
            if (ccEnableArenas == null)
            {
                this.CcEnableArenas = false;
            }
            else
            {
                this.CcEnableArenas = ccEnableArenas;
            }
            this.ObjcClassPrefix = objcClassPrefix;
            this.ObjcClassPrefixBytes = objcClassPrefixBytes;
            this.CsharpNamespace = csharpNamespace;
            this.CsharpNamespaceBytes = csharpNamespaceBytes;
            this.SwiftPrefix = swiftPrefix;
            this.SwiftPrefixBytes = swiftPrefixBytes;
            this.PhpClassPrefix = phpClassPrefix;
            this.PhpClassPrefixBytes = phpClassPrefixBytes;
            this.PhpNamespace = phpNamespace;
            this.PhpNamespaceBytes = phpNamespaceBytes;
            this.ParserForType = parserForType;
            this.DefaultInstanceForType = defaultInstanceForType;
            this.SerializedSize = serializedSize;
            // use default value if no "deprecated" provided
            if (deprecated == null)
            {
                this.Deprecated = false;
            }
            else
            {
                this.Deprecated = deprecated;
            }
            this.UninterpretedOptionList = uninterpretedOptionList;
            this.UninterpretedOptionOrBuilderList = uninterpretedOptionOrBuilderList;
            this.UninterpretedOptionCount = uninterpretedOptionCount;
            // use default value if no "javaStringCheckUtf8" provided
            if (javaStringCheckUtf8 == null)
            {
                this.JavaStringCheckUtf8 = false;
            }
            else
            {
                this.JavaStringCheckUtf8 = javaStringCheckUtf8;
            }
            this.InitializationErrorString = initializationErrorString;
            this.DescriptorForType = descriptorForType;
            this.AllFields = allFields;
            this.AllFieldsRaw = allFieldsRaw;
        }
        
        /// <summary>
        /// Gets or Sets UnknownFields
        /// </summary>
        [DataMember(Name="unknownFields", EmitDefaultValue=false)]
        public UnknownFieldSet UnknownFields { get; set; }

        /// <summary>
        /// Gets or Sets Initialized
        /// </summary>
        [DataMember(Name="initialized", EmitDefaultValue=false)]
        public bool? Initialized { get; set; }

        /// <summary>
        /// Gets or Sets JavaPackage
        /// </summary>
        [DataMember(Name="javaPackage", EmitDefaultValue=false)]
        public string JavaPackage { get; set; }

        /// <summary>
        /// Gets or Sets JavaPackageBytes
        /// </summary>
        [DataMember(Name="javaPackageBytes", EmitDefaultValue=false)]
        public ByteString JavaPackageBytes { get; set; }

        /// <summary>
        /// Gets or Sets JavaOuterClassname
        /// </summary>
        [DataMember(Name="javaOuterClassname", EmitDefaultValue=false)]
        public string JavaOuterClassname { get; set; }

        /// <summary>
        /// Gets or Sets JavaOuterClassnameBytes
        /// </summary>
        [DataMember(Name="javaOuterClassnameBytes", EmitDefaultValue=false)]
        public ByteString JavaOuterClassnameBytes { get; set; }

        /// <summary>
        /// Gets or Sets JavaMultipleFiles
        /// </summary>
        [DataMember(Name="javaMultipleFiles", EmitDefaultValue=false)]
        public bool? JavaMultipleFiles { get; set; }

        /// <summary>
        /// Gets or Sets JavaGenerateEqualsAndHash
        /// </summary>
        [DataMember(Name="javaGenerateEqualsAndHash", EmitDefaultValue=false)]
        public bool? JavaGenerateEqualsAndHash { get; set; }


        /// <summary>
        /// Gets or Sets GoPackage
        /// </summary>
        [DataMember(Name="goPackage", EmitDefaultValue=false)]
        public string GoPackage { get; set; }

        /// <summary>
        /// Gets or Sets GoPackageBytes
        /// </summary>
        [DataMember(Name="goPackageBytes", EmitDefaultValue=false)]
        public ByteString GoPackageBytes { get; set; }

        /// <summary>
        /// Gets or Sets CcGenericServices
        /// </summary>
        [DataMember(Name="ccGenericServices", EmitDefaultValue=false)]
        public bool? CcGenericServices { get; set; }

        /// <summary>
        /// Gets or Sets JavaGenericServices
        /// </summary>
        [DataMember(Name="javaGenericServices", EmitDefaultValue=false)]
        public bool? JavaGenericServices { get; set; }

        /// <summary>
        /// Gets or Sets PyGenericServices
        /// </summary>
        [DataMember(Name="pyGenericServices", EmitDefaultValue=false)]
        public bool? PyGenericServices { get; set; }

        /// <summary>
        /// Gets or Sets PhpGenericServices
        /// </summary>
        [DataMember(Name="phpGenericServices", EmitDefaultValue=false)]
        public bool? PhpGenericServices { get; set; }

        /// <summary>
        /// Gets or Sets CcEnableArenas
        /// </summary>
        [DataMember(Name="ccEnableArenas", EmitDefaultValue=false)]
        public bool? CcEnableArenas { get; set; }

        /// <summary>
        /// Gets or Sets ObjcClassPrefix
        /// </summary>
        [DataMember(Name="objcClassPrefix", EmitDefaultValue=false)]
        public string ObjcClassPrefix { get; set; }

        /// <summary>
        /// Gets or Sets ObjcClassPrefixBytes
        /// </summary>
        [DataMember(Name="objcClassPrefixBytes", EmitDefaultValue=false)]
        public ByteString ObjcClassPrefixBytes { get; set; }

        /// <summary>
        /// Gets or Sets CsharpNamespace
        /// </summary>
        [DataMember(Name="csharpNamespace", EmitDefaultValue=false)]
        public string CsharpNamespace { get; set; }

        /// <summary>
        /// Gets or Sets CsharpNamespaceBytes
        /// </summary>
        [DataMember(Name="csharpNamespaceBytes", EmitDefaultValue=false)]
        public ByteString CsharpNamespaceBytes { get; set; }

        /// <summary>
        /// Gets or Sets SwiftPrefix
        /// </summary>
        [DataMember(Name="swiftPrefix", EmitDefaultValue=false)]
        public string SwiftPrefix { get; set; }

        /// <summary>
        /// Gets or Sets SwiftPrefixBytes
        /// </summary>
        [DataMember(Name="swiftPrefixBytes", EmitDefaultValue=false)]
        public ByteString SwiftPrefixBytes { get; set; }

        /// <summary>
        /// Gets or Sets PhpClassPrefix
        /// </summary>
        [DataMember(Name="phpClassPrefix", EmitDefaultValue=false)]
        public string PhpClassPrefix { get; set; }

        /// <summary>
        /// Gets or Sets PhpClassPrefixBytes
        /// </summary>
        [DataMember(Name="phpClassPrefixBytes", EmitDefaultValue=false)]
        public ByteString PhpClassPrefixBytes { get; set; }

        /// <summary>
        /// Gets or Sets PhpNamespace
        /// </summary>
        [DataMember(Name="phpNamespace", EmitDefaultValue=false)]
        public string PhpNamespace { get; set; }

        /// <summary>
        /// Gets or Sets PhpNamespaceBytes
        /// </summary>
        [DataMember(Name="phpNamespaceBytes", EmitDefaultValue=false)]
        public ByteString PhpNamespaceBytes { get; set; }

        /// <summary>
        /// Gets or Sets ParserForType
        /// </summary>
        [DataMember(Name="parserForType", EmitDefaultValue=false)]
        public ParserFileOptions ParserForType { get; set; }

        /// <summary>
        /// Gets or Sets DefaultInstanceForType
        /// </summary>
        [DataMember(Name="defaultInstanceForType", EmitDefaultValue=false)]
        public FileOptions DefaultInstanceForType { get; set; }

        /// <summary>
        /// Gets or Sets SerializedSize
        /// </summary>
        [DataMember(Name="serializedSize", EmitDefaultValue=false)]
        public int? SerializedSize { get; set; }

        /// <summary>
        /// Gets or Sets Deprecated
        /// </summary>
        [DataMember(Name="deprecated", EmitDefaultValue=false)]
        public bool? Deprecated { get; set; }

        /// <summary>
        /// Gets or Sets UninterpretedOptionList
        /// </summary>
        [DataMember(Name="uninterpretedOptionList", EmitDefaultValue=false)]
        public List<UninterpretedOption> UninterpretedOptionList { get; set; }

        /// <summary>
        /// Gets or Sets UninterpretedOptionOrBuilderList
        /// </summary>
        [DataMember(Name="uninterpretedOptionOrBuilderList", EmitDefaultValue=false)]
        public List<UninterpretedOptionOrBuilder> UninterpretedOptionOrBuilderList { get; set; }

        /// <summary>
        /// Gets or Sets UninterpretedOptionCount
        /// </summary>
        [DataMember(Name="uninterpretedOptionCount", EmitDefaultValue=false)]
        public int? UninterpretedOptionCount { get; set; }

        /// <summary>
        /// Gets or Sets JavaStringCheckUtf8
        /// </summary>
        [DataMember(Name="javaStringCheckUtf8", EmitDefaultValue=false)]
        public bool? JavaStringCheckUtf8 { get; set; }

        /// <summary>
        /// Gets or Sets InitializationErrorString
        /// </summary>
        [DataMember(Name="initializationErrorString", EmitDefaultValue=false)]
        public string InitializationErrorString { get; set; }

        /// <summary>
        /// Gets or Sets DescriptorForType
        /// </summary>
        [DataMember(Name="descriptorForType", EmitDefaultValue=false)]
        public Descriptor DescriptorForType { get; set; }

        /// <summary>
        /// Gets or Sets AllFields
        /// </summary>
        [DataMember(Name="allFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> AllFields { get; set; }

        /// <summary>
        /// Gets or Sets AllFieldsRaw
        /// </summary>
        [DataMember(Name="allFieldsRaw", EmitDefaultValue=false)]
        public Dictionary<string, Object> AllFieldsRaw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileOptions {\n");
            sb.Append("  UnknownFields: ").Append(UnknownFields).Append("\n");
            sb.Append("  Initialized: ").Append(Initialized).Append("\n");
            sb.Append("  JavaPackage: ").Append(JavaPackage).Append("\n");
            sb.Append("  JavaPackageBytes: ").Append(JavaPackageBytes).Append("\n");
            sb.Append("  JavaOuterClassname: ").Append(JavaOuterClassname).Append("\n");
            sb.Append("  JavaOuterClassnameBytes: ").Append(JavaOuterClassnameBytes).Append("\n");
            sb.Append("  JavaMultipleFiles: ").Append(JavaMultipleFiles).Append("\n");
            sb.Append("  JavaGenerateEqualsAndHash: ").Append(JavaGenerateEqualsAndHash).Append("\n");
            sb.Append("  OptimizeFor: ").Append(OptimizeFor).Append("\n");
            sb.Append("  GoPackage: ").Append(GoPackage).Append("\n");
            sb.Append("  GoPackageBytes: ").Append(GoPackageBytes).Append("\n");
            sb.Append("  CcGenericServices: ").Append(CcGenericServices).Append("\n");
            sb.Append("  JavaGenericServices: ").Append(JavaGenericServices).Append("\n");
            sb.Append("  PyGenericServices: ").Append(PyGenericServices).Append("\n");
            sb.Append("  PhpGenericServices: ").Append(PhpGenericServices).Append("\n");
            sb.Append("  CcEnableArenas: ").Append(CcEnableArenas).Append("\n");
            sb.Append("  ObjcClassPrefix: ").Append(ObjcClassPrefix).Append("\n");
            sb.Append("  ObjcClassPrefixBytes: ").Append(ObjcClassPrefixBytes).Append("\n");
            sb.Append("  CsharpNamespace: ").Append(CsharpNamespace).Append("\n");
            sb.Append("  CsharpNamespaceBytes: ").Append(CsharpNamespaceBytes).Append("\n");
            sb.Append("  SwiftPrefix: ").Append(SwiftPrefix).Append("\n");
            sb.Append("  SwiftPrefixBytes: ").Append(SwiftPrefixBytes).Append("\n");
            sb.Append("  PhpClassPrefix: ").Append(PhpClassPrefix).Append("\n");
            sb.Append("  PhpClassPrefixBytes: ").Append(PhpClassPrefixBytes).Append("\n");
            sb.Append("  PhpNamespace: ").Append(PhpNamespace).Append("\n");
            sb.Append("  PhpNamespaceBytes: ").Append(PhpNamespaceBytes).Append("\n");
            sb.Append("  ParserForType: ").Append(ParserForType).Append("\n");
            sb.Append("  DefaultInstanceForType: ").Append(DefaultInstanceForType).Append("\n");
            sb.Append("  SerializedSize: ").Append(SerializedSize).Append("\n");
            sb.Append("  Deprecated: ").Append(Deprecated).Append("\n");
            sb.Append("  UninterpretedOptionList: ").Append(UninterpretedOptionList).Append("\n");
            sb.Append("  UninterpretedOptionOrBuilderList: ").Append(UninterpretedOptionOrBuilderList).Append("\n");
            sb.Append("  UninterpretedOptionCount: ").Append(UninterpretedOptionCount).Append("\n");
            sb.Append("  JavaStringCheckUtf8: ").Append(JavaStringCheckUtf8).Append("\n");
            sb.Append("  InitializationErrorString: ").Append(InitializationErrorString).Append("\n");
            sb.Append("  DescriptorForType: ").Append(DescriptorForType).Append("\n");
            sb.Append("  AllFields: ").Append(AllFields).Append("\n");
            sb.Append("  AllFieldsRaw: ").Append(AllFieldsRaw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileOptions);
        }

        /// <summary>
        /// Returns true if FileOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of FileOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UnknownFields == input.UnknownFields ||
                    (this.UnknownFields != null &&
                    this.UnknownFields.Equals(input.UnknownFields))
                ) && 
                (
                    this.Initialized == input.Initialized ||
                    (this.Initialized != null &&
                    this.Initialized.Equals(input.Initialized))
                ) && 
                (
                    this.JavaPackage == input.JavaPackage ||
                    (this.JavaPackage != null &&
                    this.JavaPackage.Equals(input.JavaPackage))
                ) && 
                (
                    this.JavaPackageBytes == input.JavaPackageBytes ||
                    (this.JavaPackageBytes != null &&
                    this.JavaPackageBytes.Equals(input.JavaPackageBytes))
                ) && 
                (
                    this.JavaOuterClassname == input.JavaOuterClassname ||
                    (this.JavaOuterClassname != null &&
                    this.JavaOuterClassname.Equals(input.JavaOuterClassname))
                ) && 
                (
                    this.JavaOuterClassnameBytes == input.JavaOuterClassnameBytes ||
                    (this.JavaOuterClassnameBytes != null &&
                    this.JavaOuterClassnameBytes.Equals(input.JavaOuterClassnameBytes))
                ) && 
                (
                    this.JavaMultipleFiles == input.JavaMultipleFiles ||
                    (this.JavaMultipleFiles != null &&
                    this.JavaMultipleFiles.Equals(input.JavaMultipleFiles))
                ) && 
                (
                    this.JavaGenerateEqualsAndHash == input.JavaGenerateEqualsAndHash ||
                    (this.JavaGenerateEqualsAndHash != null &&
                    this.JavaGenerateEqualsAndHash.Equals(input.JavaGenerateEqualsAndHash))
                ) && 
                (
                    this.OptimizeFor == input.OptimizeFor ||
                    (this.OptimizeFor != null &&
                    this.OptimizeFor.Equals(input.OptimizeFor))
                ) && 
                (
                    this.GoPackage == input.GoPackage ||
                    (this.GoPackage != null &&
                    this.GoPackage.Equals(input.GoPackage))
                ) && 
                (
                    this.GoPackageBytes == input.GoPackageBytes ||
                    (this.GoPackageBytes != null &&
                    this.GoPackageBytes.Equals(input.GoPackageBytes))
                ) && 
                (
                    this.CcGenericServices == input.CcGenericServices ||
                    (this.CcGenericServices != null &&
                    this.CcGenericServices.Equals(input.CcGenericServices))
                ) && 
                (
                    this.JavaGenericServices == input.JavaGenericServices ||
                    (this.JavaGenericServices != null &&
                    this.JavaGenericServices.Equals(input.JavaGenericServices))
                ) && 
                (
                    this.PyGenericServices == input.PyGenericServices ||
                    (this.PyGenericServices != null &&
                    this.PyGenericServices.Equals(input.PyGenericServices))
                ) && 
                (
                    this.PhpGenericServices == input.PhpGenericServices ||
                    (this.PhpGenericServices != null &&
                    this.PhpGenericServices.Equals(input.PhpGenericServices))
                ) && 
                (
                    this.CcEnableArenas == input.CcEnableArenas ||
                    (this.CcEnableArenas != null &&
                    this.CcEnableArenas.Equals(input.CcEnableArenas))
                ) && 
                (
                    this.ObjcClassPrefix == input.ObjcClassPrefix ||
                    (this.ObjcClassPrefix != null &&
                    this.ObjcClassPrefix.Equals(input.ObjcClassPrefix))
                ) && 
                (
                    this.ObjcClassPrefixBytes == input.ObjcClassPrefixBytes ||
                    (this.ObjcClassPrefixBytes != null &&
                    this.ObjcClassPrefixBytes.Equals(input.ObjcClassPrefixBytes))
                ) && 
                (
                    this.CsharpNamespace == input.CsharpNamespace ||
                    (this.CsharpNamespace != null &&
                    this.CsharpNamespace.Equals(input.CsharpNamespace))
                ) && 
                (
                    this.CsharpNamespaceBytes == input.CsharpNamespaceBytes ||
                    (this.CsharpNamespaceBytes != null &&
                    this.CsharpNamespaceBytes.Equals(input.CsharpNamespaceBytes))
                ) && 
                (
                    this.SwiftPrefix == input.SwiftPrefix ||
                    (this.SwiftPrefix != null &&
                    this.SwiftPrefix.Equals(input.SwiftPrefix))
                ) && 
                (
                    this.SwiftPrefixBytes == input.SwiftPrefixBytes ||
                    (this.SwiftPrefixBytes != null &&
                    this.SwiftPrefixBytes.Equals(input.SwiftPrefixBytes))
                ) && 
                (
                    this.PhpClassPrefix == input.PhpClassPrefix ||
                    (this.PhpClassPrefix != null &&
                    this.PhpClassPrefix.Equals(input.PhpClassPrefix))
                ) && 
                (
                    this.PhpClassPrefixBytes == input.PhpClassPrefixBytes ||
                    (this.PhpClassPrefixBytes != null &&
                    this.PhpClassPrefixBytes.Equals(input.PhpClassPrefixBytes))
                ) && 
                (
                    this.PhpNamespace == input.PhpNamespace ||
                    (this.PhpNamespace != null &&
                    this.PhpNamespace.Equals(input.PhpNamespace))
                ) && 
                (
                    this.PhpNamespaceBytes == input.PhpNamespaceBytes ||
                    (this.PhpNamespaceBytes != null &&
                    this.PhpNamespaceBytes.Equals(input.PhpNamespaceBytes))
                ) && 
                (
                    this.ParserForType == input.ParserForType ||
                    (this.ParserForType != null &&
                    this.ParserForType.Equals(input.ParserForType))
                ) && 
                (
                    this.DefaultInstanceForType == input.DefaultInstanceForType ||
                    (this.DefaultInstanceForType != null &&
                    this.DefaultInstanceForType.Equals(input.DefaultInstanceForType))
                ) && 
                (
                    this.SerializedSize == input.SerializedSize ||
                    (this.SerializedSize != null &&
                    this.SerializedSize.Equals(input.SerializedSize))
                ) && 
                (
                    this.Deprecated == input.Deprecated ||
                    (this.Deprecated != null &&
                    this.Deprecated.Equals(input.Deprecated))
                ) && 
                (
                    this.UninterpretedOptionList == input.UninterpretedOptionList ||
                    this.UninterpretedOptionList != null &&
                    this.UninterpretedOptionList.SequenceEqual(input.UninterpretedOptionList)
                ) && 
                (
                    this.UninterpretedOptionOrBuilderList == input.UninterpretedOptionOrBuilderList ||
                    this.UninterpretedOptionOrBuilderList != null &&
                    this.UninterpretedOptionOrBuilderList.SequenceEqual(input.UninterpretedOptionOrBuilderList)
                ) && 
                (
                    this.UninterpretedOptionCount == input.UninterpretedOptionCount ||
                    (this.UninterpretedOptionCount != null &&
                    this.UninterpretedOptionCount.Equals(input.UninterpretedOptionCount))
                ) && 
                (
                    this.JavaStringCheckUtf8 == input.JavaStringCheckUtf8 ||
                    (this.JavaStringCheckUtf8 != null &&
                    this.JavaStringCheckUtf8.Equals(input.JavaStringCheckUtf8))
                ) && 
                (
                    this.InitializationErrorString == input.InitializationErrorString ||
                    (this.InitializationErrorString != null &&
                    this.InitializationErrorString.Equals(input.InitializationErrorString))
                ) && 
                (
                    this.DescriptorForType == input.DescriptorForType ||
                    (this.DescriptorForType != null &&
                    this.DescriptorForType.Equals(input.DescriptorForType))
                ) && 
                (
                    this.AllFields == input.AllFields ||
                    this.AllFields != null &&
                    this.AllFields.SequenceEqual(input.AllFields)
                ) && 
                (
                    this.AllFieldsRaw == input.AllFieldsRaw ||
                    this.AllFieldsRaw != null &&
                    this.AllFieldsRaw.SequenceEqual(input.AllFieldsRaw)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnknownFields != null)
                    hashCode = hashCode * 59 + this.UnknownFields.GetHashCode();
                if (this.Initialized != null)
                    hashCode = hashCode * 59 + this.Initialized.GetHashCode();
                if (this.JavaPackage != null)
                    hashCode = hashCode * 59 + this.JavaPackage.GetHashCode();
                if (this.JavaPackageBytes != null)
                    hashCode = hashCode * 59 + this.JavaPackageBytes.GetHashCode();
                if (this.JavaOuterClassname != null)
                    hashCode = hashCode * 59 + this.JavaOuterClassname.GetHashCode();
                if (this.JavaOuterClassnameBytes != null)
                    hashCode = hashCode * 59 + this.JavaOuterClassnameBytes.GetHashCode();
                if (this.JavaMultipleFiles != null)
                    hashCode = hashCode * 59 + this.JavaMultipleFiles.GetHashCode();
                if (this.JavaGenerateEqualsAndHash != null)
                    hashCode = hashCode * 59 + this.JavaGenerateEqualsAndHash.GetHashCode();
                if (this.OptimizeFor != null)
                    hashCode = hashCode * 59 + this.OptimizeFor.GetHashCode();
                if (this.GoPackage != null)
                    hashCode = hashCode * 59 + this.GoPackage.GetHashCode();
                if (this.GoPackageBytes != null)
                    hashCode = hashCode * 59 + this.GoPackageBytes.GetHashCode();
                if (this.CcGenericServices != null)
                    hashCode = hashCode * 59 + this.CcGenericServices.GetHashCode();
                if (this.JavaGenericServices != null)
                    hashCode = hashCode * 59 + this.JavaGenericServices.GetHashCode();
                if (this.PyGenericServices != null)
                    hashCode = hashCode * 59 + this.PyGenericServices.GetHashCode();
                if (this.PhpGenericServices != null)
                    hashCode = hashCode * 59 + this.PhpGenericServices.GetHashCode();
                if (this.CcEnableArenas != null)
                    hashCode = hashCode * 59 + this.CcEnableArenas.GetHashCode();
                if (this.ObjcClassPrefix != null)
                    hashCode = hashCode * 59 + this.ObjcClassPrefix.GetHashCode();
                if (this.ObjcClassPrefixBytes != null)
                    hashCode = hashCode * 59 + this.ObjcClassPrefixBytes.GetHashCode();
                if (this.CsharpNamespace != null)
                    hashCode = hashCode * 59 + this.CsharpNamespace.GetHashCode();
                if (this.CsharpNamespaceBytes != null)
                    hashCode = hashCode * 59 + this.CsharpNamespaceBytes.GetHashCode();
                if (this.SwiftPrefix != null)
                    hashCode = hashCode * 59 + this.SwiftPrefix.GetHashCode();
                if (this.SwiftPrefixBytes != null)
                    hashCode = hashCode * 59 + this.SwiftPrefixBytes.GetHashCode();
                if (this.PhpClassPrefix != null)
                    hashCode = hashCode * 59 + this.PhpClassPrefix.GetHashCode();
                if (this.PhpClassPrefixBytes != null)
                    hashCode = hashCode * 59 + this.PhpClassPrefixBytes.GetHashCode();
                if (this.PhpNamespace != null)
                    hashCode = hashCode * 59 + this.PhpNamespace.GetHashCode();
                if (this.PhpNamespaceBytes != null)
                    hashCode = hashCode * 59 + this.PhpNamespaceBytes.GetHashCode();
                if (this.ParserForType != null)
                    hashCode = hashCode * 59 + this.ParserForType.GetHashCode();
                if (this.DefaultInstanceForType != null)
                    hashCode = hashCode * 59 + this.DefaultInstanceForType.GetHashCode();
                if (this.SerializedSize != null)
                    hashCode = hashCode * 59 + this.SerializedSize.GetHashCode();
                if (this.Deprecated != null)
                    hashCode = hashCode * 59 + this.Deprecated.GetHashCode();
                if (this.UninterpretedOptionList != null)
                    hashCode = hashCode * 59 + this.UninterpretedOptionList.GetHashCode();
                if (this.UninterpretedOptionOrBuilderList != null)
                    hashCode = hashCode * 59 + this.UninterpretedOptionOrBuilderList.GetHashCode();
                if (this.UninterpretedOptionCount != null)
                    hashCode = hashCode * 59 + this.UninterpretedOptionCount.GetHashCode();
                if (this.JavaStringCheckUtf8 != null)
                    hashCode = hashCode * 59 + this.JavaStringCheckUtf8.GetHashCode();
                if (this.InitializationErrorString != null)
                    hashCode = hashCode * 59 + this.InitializationErrorString.GetHashCode();
                if (this.DescriptorForType != null)
                    hashCode = hashCode * 59 + this.DescriptorForType.GetHashCode();
                if (this.AllFields != null)
                    hashCode = hashCode * 59 + this.AllFields.GetHashCode();
                if (this.AllFieldsRaw != null)
                    hashCode = hashCode * 59 + this.AllFieldsRaw.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
