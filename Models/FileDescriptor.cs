/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Conductor.Client.Models
{
    /// <summary>
    /// FileDescriptor
    /// </summary>
    [DataContract]
    public partial class FileDescriptor :  IEquatable<FileDescriptor>, IValidatableObject
    {
        /// <summary>
        /// Defines Syntax
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SyntaxEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum PROTO2 for value: PROTO2
            /// </summary>
            [EnumMember(Value = "PROTO2")]
            PROTO2 = 2,
            
            /// <summary>
            /// Enum PROTO3 for value: PROTO3
            /// </summary>
            [EnumMember(Value = "PROTO3")]
            PROTO3 = 3
        }

        /// <summary>
        /// Gets or Sets Syntax
        /// </summary>
        [DataMember(Name="syntax", EmitDefaultValue=false)]
        public SyntaxEnum? Syntax { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileDescriptor" /> class.
        /// </summary>
        /// <param name="messageTypes">messageTypes.</param>
        /// <param name="enumTypes">enumTypes.</param>
        /// <param name="services">services.</param>
        /// <param name="extensions">extensions.</param>
        /// <param name="dependencies">dependencies.</param>
        /// <param name="publicDependencies">publicDependencies.</param>
        /// <param name="options">options.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="syntax">syntax.</param>
        /// <param name="name">name.</param>
        /// <param name="package">package.</param>
        /// <param name="_file">_file.</param>
        public FileDescriptor(List<Descriptor> messageTypes = default(List<Descriptor>), List<EnumDescriptor> enumTypes = default(List<EnumDescriptor>), List<ServiceDescriptor> services = default(List<ServiceDescriptor>), List<FieldDescriptor> extensions = default(List<FieldDescriptor>), List<FileDescriptor> dependencies = default(List<FileDescriptor>), List<FileDescriptor> publicDependencies = default(List<FileDescriptor>), FileOptions options = default(FileOptions), string fullName = default(string), SyntaxEnum? syntax = default(SyntaxEnum?), string name = default(string), string package = default(string), FileDescriptor _file = default(FileDescriptor))
        {
            this.MessageTypes = messageTypes;
            this.EnumTypes = enumTypes;
            this.Services = services;
            this.Extensions = extensions;
            this.Dependencies = dependencies;
            this.PublicDependencies = publicDependencies;
            this.Options = options;
            this.FullName = fullName;
            this.Syntax = syntax;
            this.Name = name;
            this.Package = package;
            this._File = _file;
        }
        
        /// <summary>
        /// Gets or Sets MessageTypes
        /// </summary>
        [DataMember(Name="messageTypes", EmitDefaultValue=false)]
        public List<Descriptor> MessageTypes { get; set; }

        /// <summary>
        /// Gets or Sets EnumTypes
        /// </summary>
        [DataMember(Name="enumTypes", EmitDefaultValue=false)]
        public List<EnumDescriptor> EnumTypes { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<ServiceDescriptor> Services { get; set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [DataMember(Name="extensions", EmitDefaultValue=false)]
        public List<FieldDescriptor> Extensions { get; set; }

        /// <summary>
        /// Gets or Sets Dependencies
        /// </summary>
        [DataMember(Name="dependencies", EmitDefaultValue=false)]
        public List<FileDescriptor> Dependencies { get; set; }

        /// <summary>
        /// Gets or Sets PublicDependencies
        /// </summary>
        [DataMember(Name="publicDependencies", EmitDefaultValue=false)]
        public List<FileDescriptor> PublicDependencies { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public FileOptions Options { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }


        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Package
        /// </summary>
        [DataMember(Name="package", EmitDefaultValue=false)]
        public string Package { get; set; }

        /// <summary>
        /// Gets or Sets _File
        /// </summary>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public FileDescriptor _File { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileDescriptor {\n");
            sb.Append("  MessageTypes: ").Append(MessageTypes).Append("\n");
            sb.Append("  EnumTypes: ").Append(EnumTypes).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  Dependencies: ").Append(Dependencies).Append("\n");
            sb.Append("  PublicDependencies: ").Append(PublicDependencies).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Syntax: ").Append(Syntax).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Package: ").Append(Package).Append("\n");
            sb.Append("  _File: ").Append(_File).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileDescriptor);
        }

        /// <summary>
        /// Returns true if FileDescriptor instances are equal
        /// </summary>
        /// <param name="input">Instance of FileDescriptor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileDescriptor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MessageTypes == input.MessageTypes ||
                    this.MessageTypes != null &&
                    this.MessageTypes.SequenceEqual(input.MessageTypes)
                ) && 
                (
                    this.EnumTypes == input.EnumTypes ||
                    this.EnumTypes != null &&
                    this.EnumTypes.SequenceEqual(input.EnumTypes)
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                ) && 
                (
                    this.Extensions == input.Extensions ||
                    this.Extensions != null &&
                    this.Extensions.SequenceEqual(input.Extensions)
                ) && 
                (
                    this.Dependencies == input.Dependencies ||
                    this.Dependencies != null &&
                    this.Dependencies.SequenceEqual(input.Dependencies)
                ) && 
                (
                    this.PublicDependencies == input.PublicDependencies ||
                    this.PublicDependencies != null &&
                    this.PublicDependencies.SequenceEqual(input.PublicDependencies)
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Syntax == input.Syntax ||
                    (this.Syntax != null &&
                    this.Syntax.Equals(input.Syntax))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Package == input.Package ||
                    (this.Package != null &&
                    this.Package.Equals(input.Package))
                ) && 
                (
                    this._File == input._File ||
                    (this._File != null &&
                    this._File.Equals(input._File))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MessageTypes != null)
                    hashCode = hashCode * 59 + this.MessageTypes.GetHashCode();
                if (this.EnumTypes != null)
                    hashCode = hashCode * 59 + this.EnumTypes.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.Extensions != null)
                    hashCode = hashCode * 59 + this.Extensions.GetHashCode();
                if (this.Dependencies != null)
                    hashCode = hashCode * 59 + this.Dependencies.GetHashCode();
                if (this.PublicDependencies != null)
                    hashCode = hashCode * 59 + this.PublicDependencies.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Syntax != null)
                    hashCode = hashCode * 59 + this.Syntax.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Package != null)
                    hashCode = hashCode * 59 + this.Package.GetHashCode();
                if (this._File != null)
                    hashCode = hashCode * 59 + this._File.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
