/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Conductor.Client.Models
{
    /// <summary>
    /// HealthCheckStatus
    /// </summary>
    [DataContract]
    public partial class HealthCheckStatus :  IEquatable<HealthCheckStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheckStatus" /> class.
        /// </summary>
        /// <param name="healthResults">healthResults.</param>
        /// <param name="suppressedHealthResults">suppressedHealthResults.</param>
        /// <param name="healthy">healthy (default to false).</param>
        public HealthCheckStatus(List<Health> healthResults = default(List<Health>), List<Health> suppressedHealthResults = default(List<Health>), bool? healthy = false)
        {
            this.HealthResults = healthResults;
            this.SuppressedHealthResults = suppressedHealthResults;
            // use default value if no "healthy" provided
            if (healthy == null)
            {
                this.Healthy = false;
            }
            else
            {
                this.Healthy = healthy;
            }
        }
        
        /// <summary>
        /// Gets or Sets HealthResults
        /// </summary>
        [DataMember(Name="healthResults", EmitDefaultValue=false)]
        public List<Health> HealthResults { get; set; }

        /// <summary>
        /// Gets or Sets SuppressedHealthResults
        /// </summary>
        [DataMember(Name="suppressedHealthResults", EmitDefaultValue=false)]
        public List<Health> SuppressedHealthResults { get; set; }

        /// <summary>
        /// Gets or Sets Healthy
        /// </summary>
        [DataMember(Name="healthy", EmitDefaultValue=false)]
        public bool? Healthy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HealthCheckStatus {\n");
            sb.Append("  HealthResults: ").Append(HealthResults).Append("\n");
            sb.Append("  SuppressedHealthResults: ").Append(SuppressedHealthResults).Append("\n");
            sb.Append("  Healthy: ").Append(Healthy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HealthCheckStatus);
        }

        /// <summary>
        /// Returns true if HealthCheckStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of HealthCheckStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HealthCheckStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HealthResults == input.HealthResults ||
                    this.HealthResults != null &&
                    this.HealthResults.SequenceEqual(input.HealthResults)
                ) && 
                (
                    this.SuppressedHealthResults == input.SuppressedHealthResults ||
                    this.SuppressedHealthResults != null &&
                    this.SuppressedHealthResults.SequenceEqual(input.SuppressedHealthResults)
                ) && 
                (
                    this.Healthy == input.Healthy ||
                    (this.Healthy != null &&
                    this.Healthy.Equals(input.Healthy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HealthResults != null)
                    hashCode = hashCode * 59 + this.HealthResults.GetHashCode();
                if (this.SuppressedHealthResults != null)
                    hashCode = hashCode * 59 + this.SuppressedHealthResults.GetHashCode();
                if (this.Healthy != null)
                    hashCode = hashCode * 59 + this.Healthy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
