/*
 * Conductor API Server
 *
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using Conductor;
using Conductor.Models;

namespace Conductor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowBulkResourceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Pause the list of workflows
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <returns>BulkResponse</returns>
        BulkResponse PauseWorkflow(List<string> requestBody);

        /// <summary>
        /// Restart the list of completed workflow
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <returns>BulkResponse</returns>
        BulkResponse Restart(List<string> requestBody, bool? useLatestDefinitions = default(bool?));

        /// <summary>
        /// Resume the list of workflows
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <returns>BulkResponse</returns>
        BulkResponse ResumeWorkflow(List<string> requestBody);
        /// <summary>
        /// Retry the last failed task for each workflow from the list
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <returns>BulkResponse</returns>
        BulkResponse Retry(List<string> requestBody);

        /// <summary>
        /// Terminate workflows execution
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="reason"> (optional)</param>
        /// <returns>BulkResponse</returns>
        BulkResponse Terminate(List<string> requestBody, string reason = default(string));
        #endregion Synchronous Operations
    }

    public interface IWorkflowBulkResourceApi : IWorkflowBulkResourceApiSync
    {

    }


    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowBulkResourceApi : IWorkflowBulkResourceApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowBulkResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowBulkResourceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowBulkResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowBulkResourceApi(string basePath)
        {
            this.Configuration = Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowBulkResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowBulkResourceApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowBulkResourceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkflowBulkResourceApi(ISynchronousClient client, Configuration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.Configuration = configuration;
            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Pause the list of workflows 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <returns>BulkResponse</returns>
        public BulkResponse PauseWorkflow(List<string> requestBody)
        {
            ApiResponse<BulkResponse> localVarResponse = PauseWorkflowWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause the list of workflows 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of BulkResponse</returns>
        private ApiResponse<BulkResponse> PauseWorkflowWithHttpInfo(List<string> requestBody)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling WorkflowBulkResourceApi->PauseWorkflow");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;



            // make the HTTP request
            var localVarResponse = this.Client.Put<BulkResponse>("/api/workflow/bulk/pause", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restart the list of completed workflow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <returns>BulkResponse</returns>
        public BulkResponse Restart(List<string> requestBody, bool? useLatestDefinitions = default(bool?))
        {
            ApiResponse<BulkResponse> localVarResponse = RestartWithHttpInfo(requestBody, useLatestDefinitions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restart the list of completed workflow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <returns>ApiResponse of BulkResponse</returns>
        private ApiResponse<BulkResponse> RestartWithHttpInfo(List<string> requestBody, bool? useLatestDefinitions = default(bool?))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling WorkflowBulkResourceApi->Restart");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (useLatestDefinitions != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "useLatestDefinitions", useLatestDefinitions));
            }
            localVarRequestOptions.Data = requestBody;



            // make the HTTP request
            var localVarResponse = this.Client.Post<BulkResponse>("/api/workflow/bulk/restart", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Restart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume the list of workflows 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <returns>BulkResponse</returns>
        public BulkResponse ResumeWorkflow(List<string> requestBody)
        {
            ApiResponse<BulkResponse> localVarResponse = ResumeWorkflowWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume the list of workflows 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of BulkResponse</returns>
        private ApiResponse<BulkResponse> ResumeWorkflowWithHttpInfo(List<string> requestBody)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling WorkflowBulkResourceApi->ResumeWorkflow");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;



            // make the HTTP request
            var localVarResponse = this.Client.Put<BulkResponse>("/api/workflow/bulk/resume", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retry the last failed task for each workflow from the list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <returns>BulkResponse</returns>
        public BulkResponse Retry(List<string> requestBody)
        {
            ApiResponse<BulkResponse> localVarResponse = RetryWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retry the last failed task for each workflow from the list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of BulkResponse</returns>
        private ApiResponse<BulkResponse> RetryWithHttpInfo(List<string> requestBody)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling WorkflowBulkResourceApi->Retry");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;



            // make the HTTP request
            var localVarResponse = this.Client.Post<BulkResponse>("/api/workflow/bulk/retry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Retry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate workflows execution 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="reason"> (optional)</param>
        /// <returns>BulkResponse</returns>
        public BulkResponse Terminate(List<string> requestBody, string reason = default(string))
        {
            ApiResponse<BulkResponse> localVarResponse = TerminateWithHttpInfo(requestBody, reason);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Terminate workflows execution 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="reason"> (optional)</param>
        /// <returns>ApiResponse of BulkResponse</returns>
        private ApiResponse<BulkResponse> TerminateWithHttpInfo(List<string> requestBody, string reason = default(string))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling WorkflowBulkResourceApi->Terminate");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (reason != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reason", reason));
            }
            localVarRequestOptions.Data = requestBody;



            // make the HTTP request
            var localVarResponse = this.Client.Post<BulkResponse>("/api/workflow/bulk/terminate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Terminate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }
    }
}
