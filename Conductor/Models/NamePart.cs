/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Conductor.Models
{
    /// <summary>
    /// NamePart
    /// </summary>
    [DataContract]
    public partial class NamePart : IEquatable<NamePart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NamePart" /> class.
        /// </summary>
        /// <param name="unknownFields">unknownFields.</param>
        /// <param name="initialized">initialized (default to false).</param>
        /// <param name="parserForType">parserForType.</param>
        /// <param name="defaultInstanceForType">defaultInstanceForType.</param>
        /// <param name="serializedSize">serializedSize.</param>
        /// <param name="namePart">namePart.</param>
        /// <param name="namePartBytes">namePartBytes.</param>
        /// <param name="isExtension">isExtension (default to false).</param>
        /// <param name="initializationErrorString">initializationErrorString.</param>
        /// <param name="descriptorForType">descriptorForType.</param>
        /// <param name="allFields">allFields.</param>
        public NamePart(UnknownFieldSet unknownFields = default(UnknownFieldSet), bool? initialized = false, ParserNamePart parserForType = default(ParserNamePart), NamePart defaultInstanceForType = default(NamePart), int? serializedSize = default(int?), string namePart = default(string), ByteString namePartBytes = default(ByteString), bool? isExtension = false, string initializationErrorString = default(string), Descriptor descriptorForType = default(Descriptor), Dictionary<string, Object> allFields = default(Dictionary<string, Object>))
        {
            this.UnknownFields = unknownFields;
            // use default value if no "initialized" provided
            if (initialized == null)
            {
                this.Initialized = false;
            }
            else
            {
                this.Initialized = initialized;
            }
            this.ParserForType = parserForType;
            this.DefaultInstanceForType = defaultInstanceForType;
            this.SerializedSize = serializedSize;
            this._NamePart = namePart;
            this.NamePartBytes = namePartBytes;
            // use default value if no "isExtension" provided
            if (isExtension == null)
            {
                this.IsExtension = false;
            }
            else
            {
                this.IsExtension = isExtension;
            }
            this.InitializationErrorString = initializationErrorString;
            this.DescriptorForType = descriptorForType;
            this.AllFields = allFields;
        }

        /// <summary>
        /// Gets or Sets UnknownFields
        /// </summary>
        [DataMember(Name = "unknownFields", EmitDefaultValue = false)]
        public UnknownFieldSet UnknownFields { get; set; }

        /// <summary>
        /// Gets or Sets Initialized
        /// </summary>
        [DataMember(Name = "initialized", EmitDefaultValue = false)]
        public bool? Initialized { get; set; }

        /// <summary>
        /// Gets or Sets ParserForType
        /// </summary>
        [DataMember(Name = "parserForType", EmitDefaultValue = false)]
        public ParserNamePart ParserForType { get; set; }

        /// <summary>
        /// Gets or Sets DefaultInstanceForType
        /// </summary>
        [DataMember(Name = "defaultInstanceForType", EmitDefaultValue = false)]
        public NamePart DefaultInstanceForType { get; set; }

        /// <summary>
        /// Gets or Sets SerializedSize
        /// </summary>
        [DataMember(Name = "serializedSize", EmitDefaultValue = false)]
        public int? SerializedSize { get; set; }

        /// <summary>
        /// Gets or Sets _NamePart
        /// </summary>
        [DataMember(Name = "namePart", EmitDefaultValue = false)]
        public string _NamePart { get; set; }

        /// <summary>
        /// Gets or Sets NamePartBytes
        /// </summary>
        [DataMember(Name = "namePartBytes", EmitDefaultValue = false)]
        public ByteString NamePartBytes { get; set; }

        /// <summary>
        /// Gets or Sets IsExtension
        /// </summary>
        [DataMember(Name = "isExtension", EmitDefaultValue = false)]
        public bool? IsExtension { get; set; }

        /// <summary>
        /// Gets or Sets InitializationErrorString
        /// </summary>
        [DataMember(Name = "initializationErrorString", EmitDefaultValue = false)]
        public string InitializationErrorString { get; set; }

        /// <summary>
        /// Gets or Sets DescriptorForType
        /// </summary>
        [DataMember(Name = "descriptorForType", EmitDefaultValue = false)]
        public Descriptor DescriptorForType { get; set; }

        /// <summary>
        /// Gets or Sets AllFields
        /// </summary>
        [DataMember(Name = "allFields", EmitDefaultValue = false)]
        public Dictionary<string, Object> AllFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NamePart {\n");
            sb.Append("  UnknownFields: ").Append(UnknownFields).Append("\n");
            sb.Append("  Initialized: ").Append(Initialized).Append("\n");
            sb.Append("  ParserForType: ").Append(ParserForType).Append("\n");
            sb.Append("  DefaultInstanceForType: ").Append(DefaultInstanceForType).Append("\n");
            sb.Append("  SerializedSize: ").Append(SerializedSize).Append("\n");
            sb.Append("  _NamePart: ").Append(_NamePart).Append("\n");
            sb.Append("  NamePartBytes: ").Append(NamePartBytes).Append("\n");
            sb.Append("  IsExtension: ").Append(IsExtension).Append("\n");
            sb.Append("  InitializationErrorString: ").Append(InitializationErrorString).Append("\n");
            sb.Append("  DescriptorForType: ").Append(DescriptorForType).Append("\n");
            sb.Append("  AllFields: ").Append(AllFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NamePart);
        }

        /// <summary>
        /// Returns true if NamePart instances are equal
        /// </summary>
        /// <param name="input">Instance of NamePart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NamePart input)
        {
            if (input == null)
                return false;

            return
                (
                    this.UnknownFields == input.UnknownFields ||
                    (this.UnknownFields != null &&
                    this.UnknownFields.Equals(input.UnknownFields))
                ) &&
                (
                    this.Initialized == input.Initialized ||
                    (this.Initialized != null &&
                    this.Initialized.Equals(input.Initialized))
                ) &&
                (
                    this.ParserForType == input.ParserForType ||
                    (this.ParserForType != null &&
                    this.ParserForType.Equals(input.ParserForType))
                ) &&
                (
                    this.DefaultInstanceForType == input.DefaultInstanceForType ||
                    (this.DefaultInstanceForType != null &&
                    this.DefaultInstanceForType.Equals(input.DefaultInstanceForType))
                ) &&
                (
                    this.SerializedSize == input.SerializedSize ||
                    (this.SerializedSize != null &&
                    this.SerializedSize.Equals(input.SerializedSize))
                ) &&
                (
                    this._NamePart == input._NamePart ||
                    (this._NamePart != null &&
                    this._NamePart.Equals(input._NamePart))
                ) &&
                (
                    this.NamePartBytes == input.NamePartBytes ||
                    (this.NamePartBytes != null &&
                    this.NamePartBytes.Equals(input.NamePartBytes))
                ) &&
                (
                    this.IsExtension == input.IsExtension ||
                    (this.IsExtension != null &&
                    this.IsExtension.Equals(input.IsExtension))
                ) &&
                (
                    this.InitializationErrorString == input.InitializationErrorString ||
                    (this.InitializationErrorString != null &&
                    this.InitializationErrorString.Equals(input.InitializationErrorString))
                ) &&
                (
                    this.DescriptorForType == input.DescriptorForType ||
                    (this.DescriptorForType != null &&
                    this.DescriptorForType.Equals(input.DescriptorForType))
                ) &&
                (
                    this.AllFields == input.AllFields ||
                    this.AllFields != null &&
                    this.AllFields.SequenceEqual(input.AllFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnknownFields != null)
                    hashCode = hashCode * 59 + this.UnknownFields.GetHashCode();
                if (this.Initialized != null)
                    hashCode = hashCode * 59 + this.Initialized.GetHashCode();
                if (this.ParserForType != null)
                    hashCode = hashCode * 59 + this.ParserForType.GetHashCode();
                if (this.DefaultInstanceForType != null)
                    hashCode = hashCode * 59 + this.DefaultInstanceForType.GetHashCode();
                if (this.SerializedSize != null)
                    hashCode = hashCode * 59 + this.SerializedSize.GetHashCode();
                if (this._NamePart != null)
                    hashCode = hashCode * 59 + this._NamePart.GetHashCode();
                if (this.NamePartBytes != null)
                    hashCode = hashCode * 59 + this.NamePartBytes.GetHashCode();
                if (this.IsExtension != null)
                    hashCode = hashCode * 59 + this.IsExtension.GetHashCode();
                if (this.InitializationErrorString != null)
                    hashCode = hashCode * 59 + this.InitializationErrorString.GetHashCode();
                if (this.DescriptorForType != null)
                    hashCode = hashCode * 59 + this.DescriptorForType.GetHashCode();
                if (this.AllFields != null)
                    hashCode = hashCode * 59 + this.AllFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
