/* 
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Conductor.Models
{
    /// <summary>
    /// Descriptor
    /// </summary>
    [DataContract]
    public partial class Descriptor : IEquatable<Descriptor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Descriptor" /> class.
        /// </summary>
        /// <param name="index">index.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="_file">_file.</param>
        /// <param name="containingType">containingType.</param>
        /// <param name="nestedTypes">nestedTypes.</param>
        /// <param name="enumTypes">enumTypes.</param>
        /// <param name="fields">fields.</param>
        /// <param name="extensions">extensions.</param>
        /// <param name="oneofs">oneofs.</param>
        /// <param name="options">options.</param>
        /// <param name="extendable">extendable (default to false).</param>
        /// <param name="name">name.</param>
        public Descriptor(int? index = default(int?), string fullName = default(string), FileDescriptor _file = default(FileDescriptor), Descriptor containingType = default(Descriptor), List<Descriptor> nestedTypes = default(List<Descriptor>), List<EnumDescriptor> enumTypes = default(List<EnumDescriptor>), List<FieldDescriptor> fields = default(List<FieldDescriptor>), List<FieldDescriptor> extensions = default(List<FieldDescriptor>), List<OneofDescriptor> oneofs = default(List<OneofDescriptor>), MessageOptions options = default(MessageOptions), bool? extendable = false, string name = default(string))
        {
            this.Index = index;
            this.FullName = fullName;
            this._File = _file;
            this.ContainingType = containingType;
            this.NestedTypes = nestedTypes;
            this.EnumTypes = enumTypes;
            this.Fields = fields;
            this.Extensions = extensions;
            this.Oneofs = oneofs;
            this.Options = options;
            // use default value if no "extendable" provided
            if (extendable == null)
            {
                this.Extendable = false;
            }
            else
            {
                this.Extendable = extendable;
            }
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int? Index { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "fullName", EmitDefaultValue = false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets _File
        /// </summary>
        [DataMember(Name = "file", EmitDefaultValue = false)]
        public FileDescriptor _File { get; set; }

        /// <summary>
        /// Gets or Sets ContainingType
        /// </summary>
        [DataMember(Name = "containingType", EmitDefaultValue = false)]
        public Descriptor ContainingType { get; set; }

        /// <summary>
        /// Gets or Sets NestedTypes
        /// </summary>
        [DataMember(Name = "nestedTypes", EmitDefaultValue = false)]
        public List<Descriptor> NestedTypes { get; set; }

        /// <summary>
        /// Gets or Sets EnumTypes
        /// </summary>
        [DataMember(Name = "enumTypes", EmitDefaultValue = false)]
        public List<EnumDescriptor> EnumTypes { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public List<FieldDescriptor> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [DataMember(Name = "extensions", EmitDefaultValue = false)]
        public List<FieldDescriptor> Extensions { get; set; }

        /// <summary>
        /// Gets or Sets Oneofs
        /// </summary>
        [DataMember(Name = "oneofs", EmitDefaultValue = false)]
        public List<OneofDescriptor> Oneofs { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public MessageOptions Options { get; set; }

        /// <summary>
        /// Gets or Sets Extendable
        /// </summary>
        [DataMember(Name = "extendable", EmitDefaultValue = false)]
        public bool? Extendable { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Descriptor {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  _File: ").Append(_File).Append("\n");
            sb.Append("  ContainingType: ").Append(ContainingType).Append("\n");
            sb.Append("  NestedTypes: ").Append(NestedTypes).Append("\n");
            sb.Append("  EnumTypes: ").Append(EnumTypes).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  Oneofs: ").Append(Oneofs).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Extendable: ").Append(Extendable).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Descriptor);
        }

        /// <summary>
        /// Returns true if Descriptor instances are equal
        /// </summary>
        /// <param name="input">Instance of Descriptor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Descriptor input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) &&
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) &&
                (
                    this._File == input._File ||
                    (this._File != null &&
                    this._File.Equals(input._File))
                ) &&
                (
                    this.ContainingType == input.ContainingType ||
                    (this.ContainingType != null &&
                    this.ContainingType.Equals(input.ContainingType))
                ) &&
                (
                    this.NestedTypes == input.NestedTypes ||
                    this.NestedTypes != null &&
                    this.NestedTypes.SequenceEqual(input.NestedTypes)
                ) &&
                (
                    this.EnumTypes == input.EnumTypes ||
                    this.EnumTypes != null &&
                    this.EnumTypes.SequenceEqual(input.EnumTypes)
                ) &&
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) &&
                (
                    this.Extensions == input.Extensions ||
                    this.Extensions != null &&
                    this.Extensions.SequenceEqual(input.Extensions)
                ) &&
                (
                    this.Oneofs == input.Oneofs ||
                    this.Oneofs != null &&
                    this.Oneofs.SequenceEqual(input.Oneofs)
                ) &&
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) &&
                (
                    this.Extendable == input.Extendable ||
                    (this.Extendable != null &&
                    this.Extendable.Equals(input.Extendable))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this._File != null)
                    hashCode = hashCode * 59 + this._File.GetHashCode();
                if (this.ContainingType != null)
                    hashCode = hashCode * 59 + this.ContainingType.GetHashCode();
                if (this.NestedTypes != null)
                    hashCode = hashCode * 59 + this.NestedTypes.GetHashCode();
                if (this.EnumTypes != null)
                    hashCode = hashCode * 59 + this.EnumTypes.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.Extensions != null)
                    hashCode = hashCode * 59 + this.Extensions.GetHashCode();
                if (this.Oneofs != null)
                    hashCode = hashCode * 59 + this.Oneofs.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.Extendable != null)
                    hashCode = hashCode * 59 + this.Extendable.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
