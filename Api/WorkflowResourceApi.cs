/*
 * Conductor API Server
 *
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using Conductor.Client.Models;
using Conductor.Client;


namespace Conductor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowResourceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Starts the decision task for a workflow
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <returns></returns>
        void Decide(string workflowId);
        /// <summary>
        /// Removes the workflow from the system
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="archiveWorkflow"> (optional, default to true)</param>
        /// <returns></returns>
        void Delete(string workflowId, bool? archiveWorkflow = default(bool?));

        /// <summary>
        /// Gets the workflow by workflow id
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="includeTasks"> (optional, default to true)</param>
        /// <returns>Workflow</returns>
        Workflow GetExecutionStatus(string workflowId, bool? includeTasks = default(bool?));

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <returns>ExternalStorageLocation</returns>
        ExternalStorageLocation GetExternalStorageLocation(string path, string operation, string payloadType);

        /// <summary>
        /// Retrieve all the running workflows
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"> (optional, default to 1)</param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetRunningWorkflow(string name, int? version = default(int?), long? startTime = default(long?), long? endTime = default(long?));
        /// <summary>
        /// Lists workflows for the given correlation id list
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <returns>Dictionary&lt;string, List&lt;Workflow&gt;&gt;</returns>
        Dictionary<string, List<Workflow>> GetWorkflows(string name, List<string> requestBody, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?));
        /// <summary>
        /// Lists workflows for the given correlation id
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="correlationId"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <returns>List&lt;Workflow&gt;</returns>
        List<Workflow> GetWorkflowsByCorrelationId(string name, string correlationId, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?));
        /// <summary>
        /// Pauses the workflow
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <returns></returns>
        void PauseWorkflow(string workflowId);
        /// <summary>
        /// Reruns the workflow from a specific task
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="rerunWorkflowRequest"></param>
        /// <returns>string</returns>
        string Rerun(string workflowId, RerunWorkflowRequest rerunWorkflowRequest);
        /// <summary>
        /// Resets callback times of all non-terminal SIMPLE tasks to 0
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <returns></returns>
        void ResetWorkflow(string workflowId);

        /// <summary>
        /// Restarts a completed workflow
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <returns></returns>
        void Restart(string workflowId, bool? useLatestDefinitions = default(bool?));
        /// <summary>
        /// Resumes the workflow
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <returns></returns>
        void ResumeWorkflow(string workflowId);
        /// <summary>
        /// Retries the last failed task
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="resumeSubworkflowTasks"> (optional, default to false)</param>
        /// <returns></returns>
        void Retry(string workflowId, bool? resumeSubworkflowTasks = default(bool?));
        /// <summary>
        /// Search for workflows based on payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <returns>SearchResultWorkflowSummary</returns>
        SearchResultWorkflowSummary Search(int? start = default(int?), int? size = default(int?), string sort = default(string), string freeText = default(string), string query = default(string));
        /// <summary>
        /// Search for workflows based on payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <returns>SearchResultWorkflow</returns>
        SearchResultWorkflow SearchV2(int? start = default(int?), int? size = default(int?), string sort = default(string), string freeText = default(string), string query = default(string));

        /// <summary>
        /// Search for workflows based on task parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <returns>SearchResultWorkflowSummary</returns>
        SearchResultWorkflowSummary SearchWorkflowsByTasks(int? start = default(int?), int? size = default(int?), string sort = default(string), string freeText = default(string), string query = default(string));

        /// <summary>
        /// Search for workflows based on task parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <returns>SearchResultWorkflow</returns>
        SearchResultWorkflow SearchWorkflowsByTasksV2(int? start = default(int?), int? size = default(int?), string sort = default(string), string freeText = default(string), string query = default(string));

        /// <summary>
        /// Skips a given task from a current running workflow
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskReferenceName"></param>
        /// <param name="skipTaskRequest"> (optional)</param>
        /// <returns></returns>
        void SkipTaskFromWorkflow(string workflowId, string taskReferenceName, SkipTaskRequest skipTaskRequest = default(SkipTaskRequest));

        /// <summary>
        /// Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <param name="priority"> (optional, default to 0)</param>
        /// <returns>string</returns>
        string StartWorkflow(string name, Dictionary<string, Object> requestBody, int? version = default(int?), string correlationId = default(string), int? priority = default(int?));

        /// <summary>
        /// Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startWorkflowRequest"></param>
        /// <returns>string</returns>
        string StartWorkflowByWorkflowRequest(StartWorkflowRequest startWorkflowRequest);

        /// <summary>
        /// Terminate workflow execution
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="reason"> (optional)</param>
        /// <returns></returns>
        void Terminate(string workflowId, string reason = default(string));

        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowResourceApi : IWorkflowResourceApiSync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowResourceApi : IWorkflowResourceApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowResourceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowResourceApi(string basePath)
        {
            this.Configuration = Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowResourceApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowResourceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkflowResourceApi(ISynchronousClient client, Configuration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.Configuration = configuration;
            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Starts the decision task for a workflow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <returns></returns>
        public void Decide(string workflowId)
        {
            DecideWithHttpInfo(workflowId);
        }

        /// <summary>
        /// Starts the decision task for a workflow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        private ApiResponse<object> DecideWithHttpInfo(string workflowId)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Decide");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", ClientUtils.ParameterToString(workflowId)); // path parameter



            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/workflow/decide/{workflowId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Decide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the workflow from the system 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="archiveWorkflow"> (optional, default to true)</param>
        /// <returns></returns>
        public void Delete(string workflowId, bool? archiveWorkflow = default(bool?))
        {
            DeleteWithHttpInfo(workflowId, archiveWorkflow);
        }

        /// <summary>
        /// Removes the workflow from the system 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="archiveWorkflow"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        private ApiResponse<object> DeleteWithHttpInfo(string workflowId, bool? archiveWorkflow = default(bool?))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Delete");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", ClientUtils.ParameterToString(workflowId)); // path parameter
            if (archiveWorkflow != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "archiveWorkflow", archiveWorkflow));
            }



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/workflow/{workflowId}/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the workflow by workflow id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="includeTasks"> (optional, default to true)</param>
        /// <returns>Workflow</returns>
        public Workflow GetExecutionStatus(string workflowId, bool? includeTasks = default(bool?))
        {
            ApiResponse<Workflow> localVarResponse = GetExecutionStatusWithHttpInfo(workflowId, includeTasks);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the workflow by workflow id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="includeTasks"> (optional, default to true)</param>
        /// <returns>ApiResponse of Workflow</returns>
        private ApiResponse<Workflow> GetExecutionStatusWithHttpInfo(string workflowId, bool? includeTasks = default(bool?))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->GetExecutionStatus");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", ClientUtils.ParameterToString(workflowId)); // path parameter
            if (includeTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "includeTasks", includeTasks));
            }



            // make the HTTP request
            var localVarResponse = this.Client.Get<Workflow>("/api/workflow/{workflowId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExecutionStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <returns>ExternalStorageLocation</returns>
        public ExternalStorageLocation GetExternalStorageLocation(string path, string operation, string payloadType)
        {
            ApiResponse<ExternalStorageLocation> localVarResponse = GetExternalStorageLocationWithHttpInfo(path, operation, payloadType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <returns>ApiResponse of ExternalStorageLocation</returns>
        private ApiResponse<ExternalStorageLocation> GetExternalStorageLocationWithHttpInfo(string path, string operation, string payloadType)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new ApiException(400, "Missing required parameter 'path' when calling WorkflowResourceApi->GetExternalStorageLocation");
            }

            // verify the required parameter 'operation' is set
            if (operation == null)
            {
                throw new ApiException(400, "Missing required parameter 'operation' when calling WorkflowResourceApi->GetExternalStorageLocation");
            }

            // verify the required parameter 'payloadType' is set
            if (payloadType == null)
            {
                throw new ApiException(400, "Missing required parameter 'payloadType' when calling WorkflowResourceApi->GetExternalStorageLocation");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "operation", operation));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "payloadType", payloadType));



            // make the HTTP request
            var localVarResponse = this.Client.Get<ExternalStorageLocation>("/api/workflow/externalstoragelocation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalStorageLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the running workflows 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"> (optional, default to 1)</param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetRunningWorkflow(string name, int? version = default(int?), long? startTime = default(long?), long? endTime = default(long?))
        {
            ApiResponse<List<string>> localVarResponse = GetRunningWorkflowWithHttpInfo(name, version, startTime, endTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the running workflows 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"> (optional, default to 1)</param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        private ApiResponse<List<string>> GetRunningWorkflowWithHttpInfo(string name, int? version = default(int?), long? startTime = default(long?), long? endTime = default(long?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException(400, "Missing required parameter 'name' when calling WorkflowResourceApi->GetRunningWorkflow");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ClientUtils.ParameterToString(name)); // path parameter
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/api/workflow/running/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunningWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists workflows for the given correlation id list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <returns>Dictionary&lt;string, List&lt;Workflow&gt;&gt;</returns>
        public Dictionary<string, List<Workflow>> GetWorkflows(string name, List<string> requestBody, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?))
        {
            ApiResponse<Dictionary<string, List<Workflow>>> localVarResponse = GetWorkflowsWithHttpInfo(name, requestBody, includeClosed, includeTasks);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists workflows for the given correlation id list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;Workflow&gt;&gt;</returns>
        private ApiResponse<Dictionary<string, List<Workflow>>> GetWorkflowsWithHttpInfo(string name, List<string> requestBody, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException(400, "Missing required parameter 'name' when calling WorkflowResourceApi->GetWorkflows");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling WorkflowResourceApi->GetWorkflows");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ClientUtils.ParameterToString(name)); // path parameter
            if (includeClosed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "includeClosed", includeClosed));
            }
            if (includeTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "includeTasks", includeTasks));
            }
            localVarRequestOptions.Data = requestBody;



            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, List<Workflow>>>("/api/workflow/{name}/correlated", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists workflows for the given correlation id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="correlationId"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <returns>List&lt;Workflow&gt;</returns>
        public List<Workflow> GetWorkflowsByCorrelationId(string name, string correlationId, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?))
        {
            ApiResponse<List<Workflow>> localVarResponse = GetWorkflowsByCorrelationIdWithHttpInfo(name, correlationId, includeClosed, includeTasks);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists workflows for the given correlation id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="correlationId"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Workflow&gt;</returns>
        private ApiResponse<List<Workflow>> GetWorkflowsByCorrelationIdWithHttpInfo(string name, string correlationId, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException(400, "Missing required parameter 'name' when calling WorkflowResourceApi->GetWorkflowsByCorrelationId");
            }

            // verify the required parameter 'correlationId' is set
            if (correlationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'correlationId' when calling WorkflowResourceApi->GetWorkflowsByCorrelationId");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("correlationId", ClientUtils.ParameterToString(correlationId)); // path parameter
            if (includeClosed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "includeClosed", includeClosed));
            }
            if (includeTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "includeTasks", includeTasks));
            }



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Workflow>>("/api/workflow/{name}/correlated/{correlationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflowsByCorrelationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pauses the workflow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <returns></returns>
        public void PauseWorkflow(string workflowId)
        {
            PauseWorkflowWithHttpInfo(workflowId);
        }

        /// <summary>
        /// Pauses the workflow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        private ApiResponse<object> PauseWorkflowWithHttpInfo(string workflowId)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->PauseWorkflow");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", ClientUtils.ParameterToString(workflowId)); // path parameter



            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/workflow/{workflowId}/pause", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reruns the workflow from a specific task 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="rerunWorkflowRequest"></param>
        /// <returns>string</returns>
        public string Rerun(string workflowId, RerunWorkflowRequest rerunWorkflowRequest)
        {
            ApiResponse<string> localVarResponse = RerunWithHttpInfo(workflowId, rerunWorkflowRequest);
            return localVarResponse.RawContent;
        }

        /// <summary>
        /// Reruns the workflow from a specific task 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="rerunWorkflowRequest"></param>
        /// <returns>ApiResponse of string</returns>
        private ApiResponse<string> RerunWithHttpInfo(string workflowId, RerunWorkflowRequest rerunWorkflowRequest)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Rerun");
            }

            // verify the required parameter 'rerunWorkflowRequest' is set
            if (rerunWorkflowRequest == null)
            {
                throw new ApiException(400, "Missing required parameter 'rerunWorkflowRequest' when calling WorkflowResourceApi->Rerun");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", ClientUtils.ParameterToString(workflowId)); // path parameter
            localVarRequestOptions.Data = rerunWorkflowRequest;



            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/workflow/{workflowId}/rerun", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Rerun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resets callback times of all non-terminal SIMPLE tasks to 0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <returns></returns>
        public void ResetWorkflow(string workflowId)
        {
            ResetWorkflowWithHttpInfo(workflowId);
        }

        /// <summary>
        /// Resets callback times of all non-terminal SIMPLE tasks to 0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        private ApiResponse<object> ResetWorkflowWithHttpInfo(string workflowId)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->ResetWorkflow");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", ClientUtils.ParameterToString(workflowId)); // path parameter



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/workflow/{workflowId}/resetcallbacks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restarts a completed workflow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <returns></returns>
        public void Restart(string workflowId, bool? useLatestDefinitions = default(bool?))
        {
            RestartWithHttpInfo(workflowId, useLatestDefinitions);
        }

        /// <summary>
        /// Restarts a completed workflow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        private ApiResponse<object> RestartWithHttpInfo(string workflowId, bool? useLatestDefinitions = default(bool?))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Restart");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", ClientUtils.ParameterToString(workflowId)); // path parameter
            if (useLatestDefinitions != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "useLatestDefinitions", useLatestDefinitions));
            }



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/workflow/{workflowId}/restart", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Restart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resumes the workflow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <returns></returns>
        public void ResumeWorkflow(string workflowId)
        {
            ResumeWorkflowWithHttpInfo(workflowId);
        }

        /// <summary>
        /// Resumes the workflow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        private ApiResponse<object> ResumeWorkflowWithHttpInfo(string workflowId)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->ResumeWorkflow");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", ClientUtils.ParameterToString(workflowId)); // path parameter



            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/workflow/{workflowId}/resume", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retries the last failed task 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="resumeSubworkflowTasks"> (optional, default to false)</param>
        /// <returns></returns>
        public void Retry(string workflowId, bool? resumeSubworkflowTasks = default(bool?))
        {
            RetryWithHttpInfo(workflowId, resumeSubworkflowTasks);
        }

        /// <summary>
        /// Retries the last failed task 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="resumeSubworkflowTasks"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        private ApiResponse<object> RetryWithHttpInfo(string workflowId, bool? resumeSubworkflowTasks = default(bool?))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Retry");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", ClientUtils.ParameterToString(workflowId)); // path parameter
            if (resumeSubworkflowTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "resumeSubworkflowTasks", resumeSubworkflowTasks));
            }



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/workflow/{workflowId}/retry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Retry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflows based on payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <returns>SearchResultWorkflowSummary</returns>
        public SearchResultWorkflowSummary Search(int? start = default(int?), int? size = default(int?), string sort = default(string), string freeText = default(string), string query = default(string))
        {
            ApiResponse<SearchResultWorkflowSummary> localVarResponse = SearchWithHttpInfo(start, size, sort, freeText, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflows based on payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <returns>ApiResponse of SearchResultWorkflowSummary</returns>
        private ApiResponse<SearchResultWorkflowSummary> SearchWithHttpInfo(int? start = default(int?), int? size = default(int?), string sort = default(string), string freeText = default(string), string query = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }



            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultWorkflowSummary>("/api/workflow/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflows based on payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <returns>SearchResultWorkflow</returns>
        public SearchResultWorkflow SearchV2(int? start = default(int?), int? size = default(int?), string sort = default(string), string freeText = default(string), string query = default(string))
        {
            ApiResponse<SearchResultWorkflow> localVarResponse = SearchV2WithHttpInfo(start, size, sort, freeText, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflows based on payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <returns>ApiResponse of SearchResultWorkflow</returns>
        private ApiResponse<SearchResultWorkflow> SearchV2WithHttpInfo(int? start = default(int?), int? size = default(int?), string sort = default(string), string freeText = default(string), string query = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }



            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultWorkflow>("/api/workflow/search-v2", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflows based on task parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <returns>SearchResultWorkflowSummary</returns>
        public SearchResultWorkflowSummary SearchWorkflowsByTasks(int? start = default(int?), int? size = default(int?), string sort = default(string), string freeText = default(string), string query = default(string))
        {
            ApiResponse<SearchResultWorkflowSummary> localVarResponse = SearchWorkflowsByTasksWithHttpInfo(start, size, sort, freeText, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflows based on task parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <returns>ApiResponse of SearchResultWorkflowSummary</returns>
        private ApiResponse<SearchResultWorkflowSummary> SearchWorkflowsByTasksWithHttpInfo(int? start = default(int?), int? size = default(int?), string sort = default(string), string freeText = default(string), string query = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }



            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultWorkflowSummary>("/api/workflow/search-by-tasks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchWorkflowsByTasks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Search for workflows based on task parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <returns>SearchResultWorkflow</returns>
        public SearchResultWorkflow SearchWorkflowsByTasksV2(int? start = default(int?), int? size = default(int?), string sort = default(string), string freeText = default(string), string query = default(string))
        {
            ApiResponse<SearchResultWorkflow> localVarResponse = SearchWorkflowsByTasksV2WithHttpInfo(start, size, sort, freeText, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflows based on task parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <returns>ApiResponse of SearchResultWorkflow</returns>
        private ApiResponse<SearchResultWorkflow> SearchWorkflowsByTasksV2WithHttpInfo(int? start = default(int?), int? size = default(int?), string sort = default(string), string freeText = default(string), string query = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }



            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultWorkflow>("/api/workflow/search-by-tasks-v2", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchWorkflowsByTasksV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Skips a given task from a current running workflow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskReferenceName"></param>
        /// <param name="skipTaskRequest"> (optional)</param>
        /// <returns></returns>
        public void SkipTaskFromWorkflow(string workflowId, string taskReferenceName, SkipTaskRequest skipTaskRequest = default(SkipTaskRequest))
        {
            SkipTaskFromWorkflowWithHttpInfo(workflowId, taskReferenceName, skipTaskRequest);
        }

        /// <summary>
        /// Skips a given task from a current running workflow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskReferenceName"></param>
        /// <param name="skipTaskRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        private ApiResponse<object> SkipTaskFromWorkflowWithHttpInfo(string workflowId, string taskReferenceName, SkipTaskRequest skipTaskRequest = default(SkipTaskRequest))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->SkipTaskFromWorkflow");
            }

            // verify the required parameter 'taskReferenceName' is set
            if (taskReferenceName == null)
            {
                throw new ApiException(400, "Missing required parameter 'taskReferenceName' when calling WorkflowResourceApi->SkipTaskFromWorkflow");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", ClientUtils.ParameterToString(workflowId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskReferenceName", ClientUtils.ParameterToString(taskReferenceName)); // path parameter
            localVarRequestOptions.Data = skipTaskRequest;



            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/workflow/{workflowId}/skiptask/{taskReferenceName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SkipTaskFromWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <param name="priority"> (optional, default to 0)</param>
        /// <returns>string</returns>
        public string StartWorkflow(string name, Dictionary<string, Object> requestBody, int? version = default(int?), string correlationId = default(string), int? priority = default(int?))
        {
            ApiResponse<string> localVarResponse = StartWorkflowWithHttpInfo(name, requestBody, version, correlationId, priority);
            return localVarResponse.RawContent;
        }

        /// <summary>
        /// Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <param name="priority"> (optional, default to 0)</param>
        /// <returns>ApiResponse of string</returns>
        private ApiResponse<string> StartWorkflowWithHttpInfo(string name, Dictionary<string, Object> requestBody, int? version = default(int?), string correlationId = default(string), int? priority = default(int?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException(400, "Missing required parameter 'name' when calling WorkflowResourceApi->StartWorkflow");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling WorkflowResourceApi->StartWorkflow");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ClientUtils.ParameterToString(name)); // path parameter
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (correlationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "correlationId", correlationId));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            localVarRequestOptions.Data = requestBody;



            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/workflow/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }


        /// <summary>
        /// Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startWorkflowRequest"></param>
        /// <returns>string</returns>
        public string StartWorkflowByWorkflowRequest(StartWorkflowRequest startWorkflowRequest)
        {
            ApiResponse<string> localVarResponse = StartWorkflowByWorkflowRequestWithHttpInfo(startWorkflowRequest);
            return localVarResponse.RawContent;
        }

        /// <summary>
        /// Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startWorkflowRequest"></param>
        /// <returns>ApiResponse of string</returns>
        private ApiResponse<string> StartWorkflowByWorkflowRequestWithHttpInfo(StartWorkflowRequest startWorkflowRequest)
        {
            // verify the required parameter 'startWorkflowRequest' is set
            if (startWorkflowRequest == null)
            {
                throw new ApiException(400, "Missing required parameter 'startWorkflowRequest' when calling WorkflowResourceApi->StartWorkflowByWorkflowRequest");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = startWorkflowRequest;



            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/workflow", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartWorkflowByWorkflowRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate workflow execution 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="reason"> (optional)</param>
        /// <returns></returns>
        public void Terminate(string workflowId, string reason = default(string))
        {
            TerminateWithHttpInfo(workflowId, reason);
        }

        /// <summary>
        /// Terminate workflow execution 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="reason"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        private ApiResponse<object> TerminateWithHttpInfo(string workflowId, string reason = default(string))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Terminate");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", ClientUtils.ParameterToString(workflowId)); // path parameter
            if (reason != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reason", reason));
            }



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/workflow/{workflowId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Terminate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
